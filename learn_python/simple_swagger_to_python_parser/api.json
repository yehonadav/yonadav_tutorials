{
  "swagger" : "2.0",
  "info" : {
    "description" : "This document describes the REST interfaces used to interact with\nAmdocs Network Cloud Services Orchestrator (NSCO). The main purpose of this northbound interface is to enable services, users, and roles to be provisioned through REST API calls. \n",
    "version" : "v1.0",
    "title" : "Amdocs NCSO 10.2",
    "license" : {
      "name" : "Apache 2.0",
      "url" : "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "host" : "",
  "basePath" : "/api/v1.0",
  "tags" : [ {
    "name" : "Authentication",
    "description" : "The Authentication API enables management of user sessions. (User log on and log off.)"
  }, {
    "name" : "Authorization",
    "description" : "The Authorization API handles role-based authorization. It allows management of resources, permissions and roles."
  }, {
    "name" : "Configuration",
    "description" : "The Configuration API is used to manage configuration at the Tenant level. (These settings override those in the ASC configuration.)"
  }, {
    "name" : "Credentials vault",
    "description" : "The Credentials vault is used to store sensitive data safely. For example, the passwords for a cloud management system or for NCSO users are stored here. The Credentials Vault API enables interactions with the secure credentials vault."
  }, {
    "name" : "Generic datastore",
    "description" : "The Generic Datastore API is used to manage customer data (JSON records). The API includes actions to add, delete and search data."
  }, {
    "name" : "Object storage",
    "description" : "The Object storage API is used to manage the objects in object storage. The Object store can be used to manage JSON records, files and also provides version management."
  }, {
    "name" : "Plugin management",
    "description" : "The Plugin management API is used to manage NCSO plugins. It includes actions to add plugins, get their schema and so on."
  }, {
    "name" : "Policy rule package",
    "description" : "The Policy rule management API is used to manage policy rules. It includes actions to create, update and delete policy rules."
  }, {
    "name" : "Service catalog",
    "description" : "The Service catalog API is used to manage the service catalog. The catalog consists of a model for each service. This API allows management of each of the individual models."
  }, {
    "name" : "Service management",
    "description" : "The Service management API is used to manage service instances."
  }, {
    "name" : "Settings",
    "description" : "Settings relate to NCSO itself. For example, settings may relate to events, adding tenants or cloud management systems, and so on. The Settings API enables settings to be managed, it is a management-level API."
  }, {
    "name" : "System configuration",
    "description" : "Configuration management at the System level. This configuration either applies cross-system or per-component.  (These settings override those in the ASC configuration.)"
  }, {
    "name" : "System information",
    "description" : "The System information API is used to get events, requests and request information."
  }, {
    "name" : "Task management",
    "description" : "The Task management API is used to get and handle tasks."
  }, {
    "name" : "User management",
    "description" : "The User management API is used to manage users, their roles and permissions."
  } ],
  "schemes" : [ "https" ],
  "consumes" : [ "application/json" ],
  "produces" : [ "application/json" ],
  "paths" : {
    "/auth/tokens" : {
      "post" : {
        "tags" : [ "Authentication" ],
        "summary" : "Login",
        "description" : "Authenticate an NCSO user in the system using login credentials.\n\nWhen the user is successfully authenticated, a session token (with a unique ID) is created. This token holds information\nabout the roles assigned to the user.\n\nThe token expires after a given time, by default this is 24 hours. \n",
        "operationId" : "login",
        "parameters" : [ {
          "in" : "body",
          "name" : "input",
          "description" : "Contains the credentials (user name, password and tenant) used in the login request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UserLoginCredentials"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "X-AUTH-TOKEN" : {
                "type" : "string",
                "description" : "Authentication token"
              }
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "\nUnauthorized. The user is not authorized to log in. \n\nNOTE This error will also be encountered if authentication is attempted after the token has expired. \n"
          },
          "404" : {
            "description" : "Not found. Either the user name or password is not known."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Authentication" ],
        "summary" : "Logout",
        "description" : "Log the user off from the system. This makes the session authorization token invalid.",
        "operationId" : "logout",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to log off."
          },
          "404" : {
            "description" : "Not found. Either the user name or password is not known."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/authorization/permissions" : {
      "get" : {
        "tags" : [ "Authorization" ],
        "summary" : "Get permissions",
        "description" : "Retrieve all permissions. Users are only authorized to perform operations on resources if one of their roles has an appropriate permission to use the operation.",
        "operationId" : "getPermissions",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/StringCollection"
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to get permissions."
          },
          "403" : {
            "description" : "Forbidden."
          },
          "404" : {
            "description" : "Not found. The permission was not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Authorization" ],
        "summary" : "Add permission",
        "description" : "Add a permission. \n\nPermissions are associations between operations\n(CRUD) and resource objects (services, configurations or\nusers). \n\nPermissions are assigned to roles.\n",
        "operationId" : "createPermission",
        "parameters" : [ {
          "in" : "body",
          "name" : "input",
          "description" : "Parameter values to describe the permission",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Permission"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Permission was successfully created."
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to add permissions."
          },
          "403" : {
            "description" : "Permission with given role-name already exists."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/authorization/permissions/{permissionName}" : {
      "get" : {
        "tags" : [ "Authorization" ],
        "summary" : "Get permission",
        "description" : "Retrieve a specific permission using its unique name.",
        "operationId" : "getPermissionByName",
        "parameters" : [ {
          "name" : "permissionName",
          "in" : "path",
          "description" : "The unique name of the permission.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/Permission"
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to get permissions."
          },
          "403" : {
            "description" : "Forbidden."
          },
          "404" : {
            "description" : "Not found. A permission with the given name has not been found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Authorization" ],
        "summary" : "Update permission",
        "description" : "Update an existing permission. \n\nYou can not use the update permission operation to do either of the following\n- Change the name of a permission\n- Remove operations \n\nNOTE Validation of this message checks that any operations associated with the permission before the update are also present after the update. \n",
        "operationId" : "updatePermission",
        "parameters" : [ {
          "name" : "permissionName",
          "in" : "path",
          "description" : "The name of the permission that is being updated.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "input",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/PermissionUpdate"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to update permissions."
          },
          "403" : {
            "description" : "Forbidden."
          },
          "404" : {
            "description" : "Not found. A permission with the given name has not been found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Authorization" ],
        "summary" : "Delete permission",
        "description" : "Delete an existing permission. \n\nAll roles must be dissociated from the\npermission before the permission can be deleted.\n",
        "operationId" : "deletePermission",
        "parameters" : [ {
          "name" : "permissionName",
          "in" : "path",
          "description" : "Name of the permission to be removed.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to delete permissions."
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not found. A permission with the given name has not been found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/authorization/resources" : {
      "get" : {
        "tags" : [ "Authorization" ],
        "summary" : "Get resources",
        "description" : "Retrieve all resources. A resource is a physical or logical asset that is accessed or changed using operations. The resources are represented by a unique name and a set of operations that can act on them.\n",
        "operationId" : "getResources",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to retrieve resources."
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not found. A resource with the given name has not been found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/authorization/resources/{resourceName}/operations" : {
      "get" : {
        "tags" : [ "Authorization" ],
        "summary" : "Get resource operations",
        "description" : "Retrieve the operations defined on a specific resource.",
        "operationId" : "getOperations",
        "parameters" : [ {
          "name" : "resourceName",
          "in" : "path",
          "description" : "The name of the resource whose operations you want to return.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to retrieve resource operations."
          },
          "403" : {
            "description" : "Forbidden."
          },
          "404" : {
            "description" : "Not found. A resource with the given name has not been found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/authorization/roles" : {
      "get" : {
        "tags" : [ "Authorization" ],
        "summary" : "Get roles",
        "description" : "Retrieve a list of all existing roles.",
        "operationId" : "getRoles",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/UserRoleCollection"
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to get all roles."
          },
          "403" : {
            "description" : "Forbidden."
          },
          "404" : {
            "description" : "Not found. A role with the given name has not been found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Authorization" ],
        "summary" : "Add role",
        "description" : "Add a user role.",
        "operationId" : "createRole",
        "parameters" : [ {
          "in" : "body",
          "name" : "input",
          "description" : "Parameter values that describe the role.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UserRole"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request. Parent role does not exist."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to add a role."
          },
          "403" : {
            "description" : "Forbidden. A role with given roleName already exists."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/authorization/roles/{roleName}" : {
      "get" : {
        "tags" : [ "Authorization" ],
        "summary" : "Get role",
        "description" : "Retrieve a specific role using its role name.",
        "operationId" : "getRoleByName",
        "parameters" : [ {
          "name" : "roleName",
          "in" : "path",
          "description" : "The name of the role.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/UserRole"
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to get a role."
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not found. The role with the selected roleName is not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Authorization" ],
        "summary" : "Update role",
        "description" : "Update a role. The role that you want to update is identified by its name. \n\nNOTE You cannot update the unique name given to the role.\n",
        "operationId" : "updateRole",
        "parameters" : [ {
          "name" : "roleName",
          "in" : "path",
          "description" : "The name used to identify the role.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "input",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UserRoleUpdate"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to update a role."
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not found. The role with the selected roleName is not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Authorization" ],
        "summary" : "Delete role",
        "description" : "Remove a user role. Its name is used for identification.",
        "operationId" : "deleteRole",
        "parameters" : [ {
          "name" : "roleName",
          "in" : "path",
          "description" : "The name used to identify the role.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to delete a role."
          },
          "404" : {
            "description" : "Not found. The role with the selected roleName is not found."
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/authorization/roles/{roleName}/permissions" : {
      "get" : {
        "tags" : [ "Authorization" ],
        "summary" : "Get role's effective permissions",
        "description" : "Retrieve effective permissions for a role. The role whose permissions you want to retrieve is identified by its name.\n",
        "operationId" : "getRoleEffectivePermissions",
        "parameters" : [ {
          "name" : "roleName",
          "in" : "path",
          "description" : "The name used to identify the role.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/StringCollection"
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to get the effective permissions for a role."
          },
          "403" : {
            "description" : "Forbidden."
          },
          "404" : {
            "description" : "Not found. The role with the selected roleName is not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Authorization" ],
        "summary" : "Assign permissions to role",
        "description" : "Assign permissions to an existing role. The role to assign permissions to is identified by its name.\n",
        "operationId" : "assignPermissions",
        "parameters" : [ {
          "name" : "roleName",
          "in" : "path",
          "description" : "The name used to identify the role.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "input",
          "description" : "Parameter values describing the permission IDs to associate with the role.\n",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RolePermissions"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to assign permissions to a role."
          },
          "404" : {
            "description" : "Not found. The role with the selected roleName is not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Authorization" ],
        "summary" : "De-Assign Permissions from a Role",
        "description" : "Revoke permissions from an existing role.\n",
        "operationId" : "deassignPermissions",
        "parameters" : [ {
          "name" : "roleName",
          "in" : "path",
          "description" : "The name used to identify the role.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "permissionsName",
          "in" : "query",
          "description" : "The name used to identify the permission.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "multi"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to revoke permissions from a role."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/authorization/roles/{roleName}/users" : {
      "get" : {
        "tags" : [ "Authorization" ],
        "summary" : "Get the list of users with a given role",
        "description" : "Get a list of users that are associated with a given role. The role is identified by its name.\n",
        "operationId" : "getUserWithRole",
        "parameters" : [ {
          "name" : "roleName",
          "in" : "path",
          "description" : "The name used to identify the role.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/StringCollection"
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to get users associated with a role."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Authorization" ],
        "summary" : "Assign role to the user",
        "description" : "Assign a role to a user.",
        "operationId" : "assignRole",
        "parameters" : [ {
          "name" : "roleName",
          "in" : "path",
          "description" : "The name used to identify the role.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "input",
          "description" : "The Parameter values describing the user name.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UserRoleAssignement"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to assign roles to a user."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Authorization" ],
        "summary" : "Dissociate role to the user",
        "description" : "Dissociate a role from a user.",
        "operationId" : "dissociateRole",
        "parameters" : [ {
          "name" : "userName",
          "in" : "query",
          "description" : "The name used to identify the user.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "roleName",
          "in" : "path",
          "description" : "The name used to identify the role.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to dissociate roles from a user."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/authorization/ssd" : {
      "get" : {
        "tags" : [ "Authorization" ],
        "summary" : "Get conflict rules",
        "description" : "Retrieve all existing conflict rules.",
        "operationId" : "getRules",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/RolesConflictRule"
              }
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to dissociate roles from a user."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Authorization" ],
        "summary" : "Add conflict rule",
        "description" : "Conflict rules describe what should happen if a user has a pair of roles that  conflict according to conflict rules. (Note that the rule relates to specific pairs of roles. )\n\nIf a new conflict rule is added when a user already has roles that conflict, then the operation to add the rule fails. \n\nIf no users have conflicting roles, then the rule is added. \n",
        "operationId" : "createRule",
        "parameters" : [ {
          "in" : "body",
          "name" : "input",
          "description" : "Parameter values grouping roles to define the conflict rules.",
          "required" : true,
          "schema" : {
            "type" : "object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to dissociate roles from a user."
          },
          "403" : {
            "description" : "Forbidden."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Authorization" ],
        "summary" : "Delete Conflicting Rule",
        "description" : "Delete specific conflicting pair of roles specified in query parameters\nas\n\n?<role1>=<role2>&<role3>=<role4>&...\n",
        "operationId" : "deleteRules",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/authorization/ssd/{roleName}" : {
      "get" : {
        "tags" : [ "Authorization" ],
        "summary" : "Get rules for a role",
        "description" : "Retrieve the list of those rules that are currently associated with a specific role. The role is identified using its role name.",
        "operationId" : "getByRoleName",
        "parameters" : [ {
          "name" : "roleName",
          "in" : "path",
          "description" : "Name of the role whose rules are being requested.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/StringCollection"
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to get rules associated with a role."
          },
          "403" : {
            "description" : "Forbidden."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/catalog/attributes" : {
      "get" : {
        "tags" : [ "Service catalog" ],
        "summary" : "Retrieve an attribute template list",
        "description" : "Retrieve a list of attribute templates.",
        "operationId" : "getAttributeTemplateList",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to get an attribute template list."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/catalog/attributes/{att_id}" : {
      "get" : {
        "tags" : [ "Service catalog" ],
        "summary" : "Retrieve an attribute template by attribute id",
        "description" : "Retrieve an attribute template using an attribute ID for identification. The attribute templates include the specification and any validations for the attribute instance related to the attribute template.\n",
        "operationId" : "getAttributeTemplate",
        "parameters" : [ {
          "name" : "att_id",
          "in" : "path",
          "description" : "The attribute ID for the template.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to get a template."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Service catalog" ],
        "summary" : "Creates a new attribute template",
        "description" : "Add a new attribute template to the system. \n\nThe attribute template defines the structure of a model attribute. Each model attribute is associated with an attribute template, and any model attribute value is validated with reference to the attribute template.  \n\nFor example, the attribute template may define that a particular model attribute must be an integer with minimum value of 0.\n",
        "operationId" : "putAttributeTemplate",
        "parameters" : [ {
          "name" : "att_id",
          "in" : "path",
          "description" : "The attribute ID for the template.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "input",
          "description" : "Describes the catalog attribute template values to be added or modified.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/AttributeCatalogTemplate"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "500" : {
            "description" : "Failure."
          }
        }
      },
      "delete" : {
        "tags" : [ "Service catalog" ],
        "summary" : "Delete an attribute template by attribute template id",
        "description" : "Remove entries from the catalog attribute template bucket using the attribute template ID.",
        "operationId" : "deleteAttributeTemplate",
        "parameters" : [ {
          "name" : "att_id",
          "in" : "path",
          "description" : "The attribute template ID.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to get a template."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/catalog/catalog-distribution/distribute/distribute-catalog-attribute-template" : {
      "put" : {
        "tags" : [ "Service catalog" ],
        "summary" : "Add or Modify",
        "description" : "Handle a number of attribute template entries in bulk.\n\nThe input JSON contains a list of attribute template entries and an action. The action may be one of NEW, MODIFY, or ADD_OR_MODIFY.\n\nNEW - Creates new entries. The entire operation will fail if any entries already exist.\n\nMODIFY - Updates existing entries to match the given data. The entire operation will fail if any entries do not exist.\n\nADD_OR_MODIFY - Adds entries if they do not exist, modifies entries if they exist already.\n",
        "operationId" : "distributeCatalogAttributeTemplate",
        "parameters" : [ {
          "in" : "body",
          "name" : "input",
          "description" : "Parameter values describing the update to the catalog template attributes.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CatalogDistributionAttributeTemplateInfo"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "500" : {
            "description" : "Mandatory input parameter 'attributeCatalogTemplates' is empty"
          }
        }
      }
    },
    "/catalog/catalog-distribution/distribute/distribute-catalog-node" : {
      "put" : {
        "tags" : [ "Service catalog" ],
        "summary" : "Add or Modify",
        "description" : "Handle a number of NetworkServiceNodeTemplate entries in bulk. \n\nThe input JSON contains a list of NetworkServiceNodeTemplate entries and an action. The action may be one of NEW, MODIFY, or ADD_OR_MODIFY.\n\nNEW - Creates new entries. The entire operation will fail if any entries already exist.\n\nMODIFY - Updates existing entries to match the given data. The entire operation will fail if any entries do not exist.\n\nADD_OR_MODIFY - Adds entries if they do not exist, modifies entries if they exist already.\n",
        "operationId" : "distributeCatalogNode",
        "parameters" : [ {
          "in" : "body",
          "name" : "input",
          "description" : "Parameter values describing the updates to the catalog node.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CatalogDistributionNodeInfo"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "500" : {
            "description" : "Mandatory input parameter 'attributeCatalogTemplates' is empty"
          }
        }
      }
    },
    "/catalog/catalog-distribution/distribute/remove-node/{id}" : {
      "delete" : {
        "tags" : [ "Service catalog" ],
        "summary" : "Remove a node",
        "description" : "Remove a catalog node from the system.",
        "operationId" : "removeNodeById",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The node ID used to identify the entry.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to remove nodes."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/catalog/models/{model_uid}" : {
      "get" : {
        "tags" : [ "Service catalog" ],
        "summary" : "Get model info",
        "description" : "Retrieve model information using a specific model UID.",
        "operationId" : "getModelNode",
        "parameters" : [ {
          "name" : "model_uid",
          "in" : "path",
          "description" : "The Model UID.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "Successful operation"
          }
        }
      },
      "put" : {
        "tags" : [ "Service catalog" ],
        "summary" : "Creates a new Service Node",
        "description" : "Create a new service model node using a model UID.",
        "operationId" : "putModelNode",
        "parameters" : [ {
          "name" : "model_uid",
          "in" : "path",
          "description" : "The Model UID.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "input",
          "description" : "Parameter values describing the service model node.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/NetworkServiceNodeTemplate"
          }
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      },
      "delete" : {
        "tags" : [ "Service catalog" ],
        "summary" : "Delete a service model node",
        "description" : "Delete a service model node using a specific model UID.",
        "operationId" : "deleteModel",
        "parameters" : [ {
          "name" : "model_uid",
          "in" : "path",
          "description" : "The model UID.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "Successful operation"
          }
        }
      }
    },
    "/catalog/specs" : {
      "get" : {
        "tags" : [ "Service catalog" ],
        "summary" : "Handles a GET request to get all available and sale-able services",
        "description" : "Retrieve all available and sale-able services from the catalog.",
        "operationId" : "listAllAvailableServices",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "$ref" : "#/definitions/ServiceSpecsCollection"
            }
          }
        }
      }
    },
    "/configuration/latest" : {
      "get" : {
        "tags" : [ "Configuration" ],
        "summary" : "List configurations",
        "description" : "Return a list of configurations.",
        "operationId" : "getEntries",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object",
                "properties" : { }
              }
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to list configurations."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Configuration" ],
        "summary" : "Store configuration",
        "description" : "Store configuration data.",
        "operationId" : "createEntries",
        "parameters" : [ {
          "in" : "body",
          "name" : "input",
          "description" : "Parameter values describing the configuration data.",
          "required" : true,
          "schema" : {
            "type" : "object",
            "example" : {
              "port" : "8080",
              "ip" : "127.0.0.1"
            },
            "additionalProperties" : {
              "type" : "string"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to create configuration data."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/configuration/latest/{key}" : {
      "get" : {
        "tags" : [ "Configuration" ],
        "summary" : "Retrieve configuration",
        "description" : "Retrieve the details of a specific configuration.",
        "operationId" : "getEntry",
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : " .+"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation",
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object",
                "properties" : { }
              }
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to get specific configuration data."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Configuration" ],
        "summary" : "Remove configuration",
        "description" : "Remove a specific configuration.",
        "operationId" : "deleteEntry",
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "The ID as a string.",
          "required" : true,
          "type" : "string",
          "pattern" : " .+"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to delete specific configuration data."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/credentials-vault" : {
      "post" : {
        "tags" : [ "Credentials vault" ],
        "summary" : "Create entry",
        "description" : "Create an entry in the credentials vault. \n\nAn entry includes a name (the identifier for the entry), and a list of string values to be stored securely.\n",
        "operationId" : "createEntry",
        "parameters" : [ {
          "in" : "body",
          "name" : "input",
          "description" : "Contains credentials vault data.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CredentialsVaultData"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to create an entry in the credentials vault."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/credentials-vault/{name}" : {
      "get" : {
        "tags" : [ "Credentials vault" ],
        "summary" : "Get entry",
        "description" : "Get an entry from the credentials vault using its name.",
        "operationId" : "getEntry",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The name of the entry to retrieve. (The entry name is unique.)",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/CredentialsVaultData"
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to get an entry from the credentials vault."
          },
          "404" : {
            "description" : "Not found. The entry is not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Credentials vault" ],
        "summary" : "Delete entry",
        "description" : "Delete an entry from the credentials vault. Use the entry's name to identify it for deletion.\n",
        "operationId" : "deleteEntry",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "The name of the entry to delete. (The entry name is unique.)",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to delete an entry from the credentials vault."
          },
          "404" : {
            "description" : "Not found. The entry is not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/datastore" : {
      "get" : {
        "tags" : [ "Generic datastore" ],
        "summary" : "List datastore records",
        "description" : "Retrieve a list of data store records. \n\nThe user can either filter the list by type, or they can provide an ID to retrieve specific record. \n\nNOTE Paging parameters allow for gradual retrieval of the data (records are retrieved page-by-page). \n",
        "operationId" : "listRecords",
        "parameters" : [ {
          "name" : "id",
          "in" : "query",
          "description" : "Optional. Used to filter the list to return a data store record with a specific ID.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Optional. Used to filter the list to return all data store records of a given type.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "pageStart",
          "in" : "query",
          "description" : "Paging criteria. The number of pages to present.",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Paging criteria. The number of records on each page.",
          "required" : false,
          "type" : "integer"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/DatastoreRecordDetailsCollection"
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to list datastore records."
          },
          "404" : {
            "description" : "Not found. Either the record with the specific ID is not found, or there are no records of the given type."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Generic datastore" ],
        "summary" : "Add a new entry to generic datastore.",
        "description" : "Add a new generic data store record.\n",
        "operationId" : "createRecord",
        "parameters" : [ {
          "in" : "body",
          "name" : "input",
          "description" : "The datastore record details.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/DatastoreRecordDetails"
          }
        }, {
          "name" : "overwrite",
          "in" : "query",
          "description" : "If this is true, the requested operation is forced where there is a conflict.",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to create datastore records."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/datastore/{id}" : {
      "put" : {
        "tags" : [ "Generic datastore" ],
        "summary" : "Update an existing datastore record",
        "description" : "Update an existing data store record. (The record is identified using its ID.)\n",
        "operationId" : "updateRecord",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The datastore record ID. (This is a unique identifier.)",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "input",
          "description" : "The new datastore record details.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/UpdateDatastoreRecordRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to update datastore records."
          },
          "404" : {
            "description" : "Not found. The record that the update request references is not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Generic datastore" ],
        "summary" : "Delete existing datastore record",
        "description" : "Delete an existing data store record. (The record is identified using its ID.)\n",
        "operationId" : "deleteRecord",
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The datastore record ID. (This is a unique identifier.)",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to delete datastore records."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/objectstorage" : {
      "get" : {
        "tags" : [ "Object storage" ],
        "summary" : "Lists all objects stored in Object storage",
        "description" : "Lists all of the objects that are stored in Object storage, regardless of their namespaces. \n\nThe entries are returned in batches, and each batch of objects is displayed on a single page. The purpose of this is to ensure that the system does not attempt to return an unmanageable number of results in one attempt. \n\nThe attributes describe the number of entries in one batch (count), and the first batch to display (start).\n",
        "operationId" : "listAllObjects",
        "parameters" : [ {
          "name" : "start",
          "in" : "query",
          "description" : "The first batch of results to return and display.",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "count",
          "in" : "query",
          "description" : "The number of entries that will be returned in one batch and displayed on one page.",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/StringCollection"
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to list objects in object storage."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/objectstorage/{namespace}" : {
      "get" : {
        "tags" : [ "Object storage" ],
        "summary" : "Lists all objects stored under a particular namespace in Object storage.",
        "description" : "The API lists all objects that are stored under a particular namespace.\n\nNOTES\n- The namespace is part of the URI and may contain forward slashes. (Since a namespace represents a collection of artifacts, the URI has end with a slash.)\n- The namespace cannot be empty (there is no root or default namespace).\n- The namespace is limited to up to 5 levels.\n\nThe API supports pagination to allow for very \nlong lists of objects.\n\n\nWARNING If you are using Swagger, you may encounter problems due to\nvariable path lengths and slashes in path parameters. In this case call this API using a different tool (for example cURL).\n",
        "operationId" : "listObjects",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : ".+(\\/$)"
        }, {
          "name" : "start",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "count",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/StringCollection"
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to list stored objects by namespace."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/objectstorage/{namespace}/{name}" : {
      "get" : {
        "tags" : [ "Object storage" ],
        "summary" : "Downloads the latest version of an object (artifact) in Object storage",
        "description" : "The API downloads the latest version of an artifact if the artifact with\nthe specified name and namespace exists.\n\n\nIt is up to the user to manage object versions and make sure that the\nlatest version indeed has the largest symbolic version number.\n\nNOTES\n- The namespace cannot be empty (there is no root or default\nnamespace).\n- The namespace is limited to up to 5 levels.\n\nWARNING If you are using Swagger, you may encounter problems due to\nvariable path lengths and slashes in path parameters. In this case call this API using a different tool (for example cURL).\n",
        "operationId" : "downloadObject",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : ".+(?=\\/)"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "[^\\/]+(?!\\/)"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object",
              "properties" : { }
            },
            "headers" : {
              "X-Path" : {
                "type" : "string",
                "description" : "Path"
              },
              "X-Version" : {
                "type" : "string",
                "description" : "Version"
              },
              "X-Timestamp" : {
                "type" : "string",
                "description" : "Timestamp"
              }
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to download the latest version of the object from storage."
          },
          "404" : {
            "description" : "Not found. The object is not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "head" : {
        "tags" : [ "Object storage" ],
        "summary" : "Returns meta data associated with the latest version of an object in Object storage\n",
        "description" : "This operation returns the meta data for the latest version of an object\n(artifact) as HTTP headers.\n\nThe latest version is determined using the symbolic version number\nassociated with an artifact.\n\nNOTES\n- The namespace cannot be empty (there is no root or default\nnamespace). \n- The namespace is limited to up to 5 levels.\n\nWARNING If you are using Swagger, you may encounter problems due to\nvariable path lengths and slashes in path parameters. In this case call this API using a different tool (for example cURL).\n",
        "operationId" : "infoObject",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : ".+(?=\\/)"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "[^\\/]+"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "X-Path" : {
                "type" : "string",
                "description" : "Path"
              },
              "X-Version" : {
                "type" : "string",
                "description" : "Version"
              },
              "X-Timestamp" : {
                "type" : "string",
                "description" : "Timestamp"
              }
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to get the object's meta data."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Object storage" ],
        "summary" : "Deletes all versions of an object in Object storage",
        "description" : "The API deletes all versions of an object (artifact) in Object storage. The object is identified by its name and namespace.\n\nNOTES\n- The namespace cannot be empty (there is no root or default\nnamespace).\n- The namespace is limited to up to 5 levels. \n\nWARNING If you are using Swagger, you may encounter problems due to\nvariable path lengths and slashes in path parameters. In this case call this API using a different tool (for example cURL).\n",
        "operationId" : "deleteObject",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : ".+(?=\\/)"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "[^\\/]+"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to delete all objects of the given type."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/objectstorage/{namespace}/{name}/versions" : {
      "get" : {
        "tags" : [ "Object storage" ],
        "summary" : "Lists all versions of an object in Object storage",
        "description" : "All versions of the object (artifact) are listed, identified by their\nname and namespace.\n\nNOTES\n- The namespace used to search cannot be empty (there is no root or\ndefault namespace). \n- The namespace is limited to up to 5 levels.\n- The URI has to end with a slash.\n\nPagination is supported for long lists.\n\nWARNING If you are using Swagger, you may encounter problems due to\nvariable path lengths and slashes in path parameters. In this case call this API using a different tool (for example cURL).\n",
        "operationId" : "listVersions",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : ".+(?=\\/)"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "[^\\/]+"
        }, {
          "name" : "start",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "count",
          "in" : "query",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/StringCollection"
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to list versions."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/objectstorage/{namespace}/{name}/versions/{version}" : {
      "get" : {
        "tags" : [ "Object storage" ],
        "summary" : "Downloads a particular version of an object in Object storage",
        "description" : "The operation downloads a particular version of an object (artifact)\nfrom Object Storage. The version is identified by a symbolic version number, namespace, and object name.\n\nNOTES\n- The namespace cannot be empty (there is no root or default namespace).\n- The namespace is limited to up to 5 levels.\n\nWARNING If you are using Swagger, you may encounter problems due to\nvariable path lengths and slashes in path parameters. In this case call this API using a different tool (for example cURL).\n",
        "operationId" : "downloadVersion",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : ".+(?=\\/)"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "[^\\/]+"
        }, {
          "name" : "version",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "[^\\/]+"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "type" : "object",
              "properties" : { }
            },
            "headers" : {
              "X-Path" : {
                "type" : "string",
                "description" : "Path"
              },
              "X-Version" : {
                "type" : "string",
                "description" : "Version"
              },
              "X-Timestamp" : {
                "type" : "string",
                "description" : "Timestamp"
              }
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to download a particular object version."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "head" : {
        "tags" : [ "Object storage" ],
        "summary" : "Returns meta data associated with the latest version of an object in\nObject storage\n",
        "description" : "The operation returns the meta data for the latest version of an object\n(artifact) as HTTP header information. The latest version is determined\nusing the symbolic version number associated with the artifact.\n\nNOTES\n- The namespace used in the operation cannot be empty (there is no root\nor default namespace).\n- The namespace is limited to up to 5 levels.\n\nWARNING If you are using Swagger, you may encounter problems due to\nvariable path lengths and slashes in path parameters. If you encounter a\nproblem, call this API using a different tool (for example cURL).\n",
        "operationId" : "infoVersion",
        "produces" : [ "*/*" ],
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : ".+(?=\\/)"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "[^\\/]+"
        }, {
          "name" : "version",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "[^\\/]+"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "headers" : {
              "X-Path" : {
                "type" : "string",
                "description" : "Path"
              },
              "X-Version" : {
                "type" : "string",
                "description" : "Version"
              },
              "X-Timestamp" : {
                "type" : "string",
                "description" : "Timestamp"
              }
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to get meta data using this operation."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Object storage" ],
        "summary" : "Uploads a new version of an artifact to Object storage",
        "description" : "Upload a new version of an artifact to Object storage. The operation uploads a new artifact with a particular name and version to a particular namespace. If an artifact with the same version already exists, it will be overwritten.\n\nNOTES\n- The namespace used in the request cannot be empty (there is no root or default namespace).\n- The namespace is limited to up to 5 levels.\n- If you are using cURL, the artifact can be uploaded as \"multipart/form-data\" by passing the corresponding content type header and '--data-binary @file'.\n\nWARNING If you are using Swagger, you may encounter problems due to\nvariable path lengths and slashes in path parameters. If you encounter a\nproblem, call this API using a different tool (for example cURL).\n",
        "operationId" : "uploadVersion",
        "consumes" : [ "multipart/form-data" ],
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : ".+(?=\\/)"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "[^\\/]+"
        }, {
          "name" : "version",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "[^\\/]+"
        }, {
          "name" : "file",
          "in" : "formData",
          "required" : false,
          "type" : "file"
        } ],
        "responses" : {
          "default" : {
            "description" : "successful operation"
          }
        }
      },
      "delete" : {
        "tags" : [ "Object storage" ],
        "summary" : "Deletes a particular version of an object in Object storage",
        "description" : "Identifies the artifact by its name, namespace,\nand version, and then deletes it from Object storage.\n\nNOTES\n- The namespace used in the operation cannot be empty (there is no root\nor default namespace).\n- The namespace is limited to up to 5 levels.\n\nWARNING If you are using Swagger, you may encounter problems due to\nvariable path lengths and slashes in path parameters. If you encounter a\nproblem, call this API using a different tool (for example cURL).\n",
        "operationId" : "deleteVersion",
        "parameters" : [ {
          "name" : "namespace",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : ".+(?=\\/)"
        }, {
          "name" : "name",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "[^\\/]+"
        }, {
          "name" : "version",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : "[^\\/]+"
        } ],
        "responses" : {
          "default" : {
            "description" : "Successful operation"
          }
        }
      }
    },
    "/plugins" : {
      "get" : {
        "tags" : [ "Plugin management" ],
        "summary" : "List of already registered plugins",
        "description" : "Retrieve a list of plugins that are registered in the system.",
        "operationId" : "getPlugins",
        "parameters" : [ {
          "name" : "type",
          "in" : "query",
          "description" : "Plugin type",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation.",
            "schema" : {
              "$ref" : "#/definitions/PluginKeyCollection"
            }
          },
          "500" : {
            "description" : "Internal server error."
          }
        }
      },
      "post" : {
        "tags" : [ "Plugin management" ],
        "summary" : "Add plugin",
        "description" : "Add a plugin as a ZIP file.",
        "operationId" : "createPlugin",
        "consumes" : [ "multipart/form-data" ],
        "parameters" : [ {
          "name" : "file",
          "in" : "formData",
          "description" : "ZIP file that contains\n1. Plugin JAR\n2. A /lib folder containing plugin dependencies\n3. A .manifest file in JSON format\n",
          "required" : true,
          "type" : "file"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to add plugins from ZIP files."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/plugins/{type}/{ID}" : {
      "get" : {
        "tags" : [ "Plugin management" ],
        "summary" : "Get list of plugin's versions",
        "description" : "Gets a list of plugin versions with the given plugin type and plugin ID.",
        "operationId" : "getPluginVersions",
        "parameters" : [ {
          "name" : "type",
          "in" : "path",
          "description" : "Type representing the component the plugin supports. For example,\n'Cloud Manager', 'Monitoring' or 'Policy Engine'.\n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "ID",
          "in" : "path",
          "description" : "Plugin ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/PluginKeyCollection"
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to get plugin versions."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/plugins/{type}/{ID}/{version}" : {
      "get" : {
        "tags" : [ "Plugin management" ],
        "summary" : "Retrieve plugin manifest",
        "description" : "Get the manifest file associated with a specific plugin.",
        "operationId" : "getPluginInfo",
        "parameters" : [ {
          "name" : "type",
          "in" : "path",
          "description" : "Type representing the component the plugin supports. For example,\n'Cloud Manager', 'Monitoring' or 'Policy Engine'.\n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "ID",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "Plugin version number.\nNOTE The plugin framework allows the coexistence of multiple versions of plugins.\n",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PluginInfo"
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to get the plugin manifest file."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Plugin management" ],
        "summary" : "Update plugin manifest",
        "description" : "Updates the configuration and permissions of a plugin through its\nmanifest file.\n",
        "operationId" : "updatePluginInfo",
        "parameters" : [ {
          "name" : "type",
          "in" : "path",
          "description" : "Type representing the component the plugin supports. For example,\n'Cloud Manager', 'Monitoring' or 'Policy Engine'.\n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "ID",
          "in" : "path",
          "description" : "Plugin ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "Plugin version number\nNOTE The plugin framework allows the coexistence of multiple versions of plugins.\n",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "input",
          "required" : false,
          "schema" : {
            "type" : "string"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Plugin manifest successfully updated."
          },
          "500" : {
            "description" : "Some updated data is not valid."
          }
        }
      },
      "delete" : {
        "tags" : [ "Plugin management" ],
        "summary" : "Remove plugin",
        "description" : "Remove a specific plugin file. \n\nThis operation removes the plugin bundle (ZIP) from permanent Object Storage, and also removes the local plugin from the temporary /plugins folder on the disk (where it was loaded at runtime).\n",
        "operationId" : "removePlugin",
        "parameters" : [ {
          "name" : "type",
          "in" : "path",
          "description" : "Plugin type",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "ID",
          "in" : "path",
          "description" : "Plugin ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "Plugin version",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Plugin successfully removed."
          }
        }
      }
    },
    "/plugins/{type}/{ID}/{version}/status" : {
      "put" : {
        "tags" : [ "Plugin management" ],
        "summary" : "Disable plugin",
        "description" : "Enable or disable your plugin. Use the body of this request to set the plugin status to ACTIVE or DISABLED.\n",
        "operationId" : "updateStatus",
        "parameters" : [ {
          "name" : "type",
          "in" : "path",
          "description" : "Type representing the component the plugin supports. For example,\n'Cloud Manager', 'Monitoring' or 'Policy Engine'.\n",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "ID",
          "in" : "path",
          "description" : "Plugin ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "version",
          "in" : "path",
          "description" : "Plugin version number\nNOTE The plugin framework allows the coexistence of multiple versions of plugins.\n",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "input",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PluginStatusUpdate"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Plugin state successfully changed."
          },
          "500" : {
            "description" : "Internal server error."
          }
        }
      }
    },
    "/policy/rules" : {
      "post" : {
        "tags" : [ "Policy rule package" ],
        "summary" : "Add Rule",
        "description" : "Adds a single policy rule.",
        "operationId" : "addRule",
        "parameters" : [ {
          "in" : "body",
          "name" : "input",
          "description" : "The policy rule to be added.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Rule"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Rule was successfully added."
          },
          "500" : {
            "description" : "Rules could not be added, because the specified ID already exists."
          }
        }
      },
      "delete" : {
        "tags" : [ "Policy rule package" ],
        "summary" : "Delete Rules list",
        "description" : "Deletes policy rules that conform to supplied filter criteria. The filter criteria can include a specific domain, nodeCode, nodeVersion or serviceInstanceId.\n\nOUTCOME\n- If no filter details are supplied, all policy rules are deleted. \n- If one or more filter details are supplied, any policy rules matching all of the criteria are deleted. (For example, if your filter contains a domain and nodeCode, then policy rules will be deleted that conform to both filter criteria.)\n",
        "operationId" : "deleteRules",
        "parameters" : [ {
          "in" : "body",
          "name" : "input",
          "description" : "Rules filter. Filters objects by domain, nodeCode, nodeVersion and\nserviceInstanceId.\n",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/RulesFilterObject"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Rules were successfully deleted."
          }
        }
      }
    },
    "/policy/rules-collection" : {
      "post" : {
        "tags" : [ "Policy rule package" ],
        "summary" : "Add Rules",
        "description" : "Adds multiple policy rules.",
        "operationId" : "addRules",
        "parameters" : [ {
          "in" : "body",
          "name" : "input",
          "description" : "List of policy rules to be added.",
          "required" : true,
          "schema" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/Rule"
            }
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Rules were successfully added."
          },
          "500" : {
            "description" : "Rule could not be added, because the ID already exists."
          }
        }
      }
    },
    "/policy/rules-list/{domain}" : {
      "get" : {
        "tags" : [ "Policy rule package" ],
        "summary" : "Get Rules list",
        "description" : "Lists the policy rules. \n\nThe returned list may be filtered by supplying the domain parameter, and optional parameters nodeCode, nodeVersion or serviceInstanceId.\n",
        "operationId" : "getRulesByFilter",
        "parameters" : [ {
          "name" : "domain",
          "in" : "path",
          "description" : "Domain value",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "nodeCode",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nodeVersion",
          "in" : "query",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "serviceInstanceId",
          "in" : "query",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Rules were successfully retrieved."
          }
        }
      }
    },
    "/policy/rules/{ruleId}" : {
      "get" : {
        "tags" : [ "Policy rule package" ],
        "summary" : "Get Rule",
        "description" : "Retrieves a specific policy rule using its ID.",
        "operationId" : "getRule",
        "parameters" : [ {
          "name" : "ruleId",
          "in" : "path",
          "description" : "The identifier (ID) for the rule to be retrieved.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Rule was successfully retrieved."
          },
          "500" : {
            "description" : "Rule couldn't be retrieved, since a rule with the given ID does not exist."
          }
        }
      },
      "put" : {
        "tags" : [ "Policy rule package" ],
        "summary" : "Updates Rule",
        "description" : "Updates a single policy rule. You cannot use this operation to update the fields nodeCode, serviceInstanceId or domain.\n\nIf a rule with the given ID does not exist, it is created.\n",
        "operationId" : "updateRule",
        "parameters" : [ {
          "name" : "ruleId",
          "in" : "path",
          "description" : "The ID of the rule to update.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "input",
          "description" : "The updated policy rule.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Rule"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Rule was successfully updated."
          },
          "500" : {
            "description" : "Failed to update the rule."
          }
        }
      },
      "delete" : {
        "tags" : [ "Policy rule package" ],
        "summary" : "Delete Rule",
        "description" : "Deletes a single policy rule and the corresponding DRL.",
        "operationId" : "deleteRule",
        "parameters" : [ {
          "name" : "ruleId",
          "in" : "path",
          "description" : "The ID of the rule to delete.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Rule was successfully deleted."
          }
        }
      }
    },
    "/services" : {
      "post" : {
        "tags" : [ "Service management" ],
        "summary" : "Create service",
        "description" : "Create a new service using a service request.",
        "operationId" : "createService",
        "parameters" : [ {
          "in" : "body",
          "name" : "input",
          "description" : "Parameter values describing the service request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ServiceRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/ServiceRequestAcknowledgment"
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to create a service using this operation."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/services/{serviceId}" : {
      "put" : {
        "tags" : [ "Service management" ],
        "summary" : "Modify service",
        "description" : "Modify a service using a service ID and service request.",
        "operationId" : "modifyService",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "description" : "Service ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "input",
          "description" : "Parameter values describing the service request",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ModifyServiceRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/ServiceRequestAcknowledgment"
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to modify the service using this operation."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Service management" ],
        "summary" : "Delete service",
        "description" : "Delete a service. Use its service ID to select the service to delete.",
        "operationId" : "deleteService",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "description" : "Service ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/ServiceRequestAcknowledgment"
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to delete a service using a service ID."
          },
          "404" : {
            "description" : "Not found. The service is not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/services/{serviceId}/action" : {
      "post" : {
        "tags" : [ "Service management" ],
        "summary" : "Service action",
        "description" : "Perform either the upgrade or cancel action on a service.\n\nUpgrading a service involves moving from an existing service model to a\nnew model. This includes modification of the existing service instance.\n\nCanceling a service involves removing the selected service. Since\nNetwork resources may have changed since the last successful service\nrequest, a canceled service does not cause roll back to initial\nconfiguration. The canceled service is replanned and deployed according\nto a new service execution plan.\n",
        "operationId" : "createServiceAction",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "description" : "Service ID.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "input",
          "description" : "Parameter values describing the service action request.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ServiceActionRequest"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/ServiceRequestAcknowledgment"
            }
          }
        }
      }
    },
    "/services/{serviceId}/events" : {
      "get" : {
        "tags" : [ "Service management" ],
        "summary" : "Get Events",
        "description" : "Retrieve service events by service ID. \n\nThe parameters include values that\ndescribe how the returned service events should be presented.\n",
        "operationId" : "getServiceEvents",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "pageStart",
          "in" : "query",
          "description" : "Paging criteria. The number of pages to present.",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Paging criteria. The number of records on each page.",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "sortField",
          "in" : "query",
          "description" : "Sorting criteria. The name of the field that sorting should be based on.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortDir",
          "in" : "query",
          "description" : "Sorting criteria. The sorting direction (the two valid options being ASCENDING or DESCENDING).",
          "required" : false,
          "type" : "string",
          "enum" : [ "ASCENDING", "DESCENDING" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/SystemLogEventCollection"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Service management" ],
        "summary" : "Get Events",
        "description" : "Get service events using the serviceId. Sort and filter the returned results as required. \n\nNOTE The HTTP specification does not include a body for GET methods. As a workaround to this limitation (to enable pagination and sorting parameters to be supplied), the POST method is used to fetch data.\n",
        "operationId" : "getServiceEventsWithFilter",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "description" : "Service ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "pageStart",
          "in" : "query",
          "description" : "Paging criteria. The number of pages to present.",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Paging criteria. The number of records on each page.",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "sortField",
          "in" : "query",
          "description" : "Sorting criteria. The name of the field that sorting should be based on.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortDir",
          "in" : "query",
          "description" : "Sorting criteria. The sorting direction (the two valid options being ASCENDING or DESCENDING).",
          "required" : false,
          "type" : "string",
          "enum" : [ "ASCENDING", "DESCENDING" ]
        }, {
          "in" : "body",
          "name" : "filter",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Filter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation.",
            "schema" : {
              "$ref" : "#/definitions/SystemLogEventCollection"
            }
          }
        }
      }
    },
    "/services/{serviceId}/metrics" : {
      "get" : {
        "tags" : [ "Service management" ],
        "summary" : "Get Service Metrics",
        "description" : "Retrieve metrics for a specific service and version.",
        "operationId" : "getServiceMetrics",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "description" : "Service ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serviceVersion",
          "in" : "query",
          "description" : "Service Version Number",
          "required" : false,
          "type" : "number",
          "format" : "float"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation.",
            "schema" : {
              "$ref" : "#/definitions/ServiceMetrics"
            }
          }
        }
      }
    },
    "/services/{serviceId}/metrics-history" : {
      "get" : {
        "tags" : [ "Service management" ],
        "summary" : "Get Service Metrics History",
        "description" : "Retrieve service metrics history for a specified service.",
        "operationId" : "getServiceMetricsHistory",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "description" : "Service ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serviceVersion",
          "in" : "query",
          "description" : "Service Version Number",
          "required" : false,
          "type" : "number",
          "format" : "float"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful Operation.",
            "schema" : {
              "$ref" : "#/definitions/ServiceGraphData"
            }
          },
          "500" : {
            "description" : "Internal Server Error."
          }
        }
      }
    },
    "/services/{serviceId}/nodes/{nodeID}/monitoring" : {
      "get" : {
        "tags" : [ "Service management" ],
        "summary" : "Retrieve Data",
        "description" : "Retrieve monitoring data for a specific service node.",
        "operationId" : "getNodeMonitoringData",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "description" : "Service ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "nodeID",
          "in" : "path",
          "description" : "Node ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "monitoringType",
          "in" : "query",
          "description" : "Monitoring type",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "kpi",
          "in" : "query",
          "description" : "Key performance indicator (KPI)",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation.",
            "schema" : {
              "$ref" : "#/definitions/ServiceMonitoringData"
            }
          },
          "400" : {
            "description" : "Problem with pre-conditions for this request."
          },
          "404" : {
            "description" : "Unrecognized monitoringType."
          }
        }
      }
    },
    "/services/{serviceId}/requests/{requestId}/info" : {
      "get" : {
        "tags" : [ "Service management" ],
        "summary" : "Get Service Details",
        "description" : "Retrieve the service details of a specific service request.",
        "operationId" : "getServiceDetails",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "description" : "Service ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "requestId",
          "in" : "path",
          "description" : "Request ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation.",
            "schema" : {
              "$ref" : "#/definitions/ServiceDetails"
            }
          }
        }
      }
    },
    "/services/{serviceId}/requests/{requestId}/tasks" : {
      "get" : {
        "tags" : [ "Service management" ],
        "summary" : "Get Tasks",
        "description" : "Retrieve a task list using a specific service or request ID.\n\nParameters can also be supplied that describe the presentation of the\nlisted tasks.\n\nNOTE The HTTP specification does not include a body for GET methods. As a workaround to this limitation (to enable pagination and sorting parameters to be supplied), the POST method is used to fetch data.\n",
        "operationId" : "getServiceRequestTasks",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "description" : "Service ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "requestId",
          "in" : "path",
          "description" : "Request ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "pageStart",
          "in" : "query",
          "description" : "Paging criteria. The number of pages to present.",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Paging criteria. The number of records on each page.",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "sortField",
          "in" : "query",
          "description" : "Sorting criteria. The name of the field that sorting should be based on.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortDir",
          "in" : "query",
          "description" : "Sorting criteria. The sorting direction (the two valid options being ASCENDING or DESCENDING).",
          "required" : false,
          "type" : "string",
          "enum" : [ "ASCENDING", "DESCENDING" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful Operation.",
            "schema" : {
              "$ref" : "#/definitions/SystemTaskCollection"
            }
          },
          "500" : {
            "description" : "Internal Server Error."
          }
        }
      },
      "post" : {
        "tags" : [ "Service management" ],
        "summary" : "Get Tasks",
        "description" : "Retrieve a filtered task list using a specific service or request ID. Filter returned details.\n\nParameters can also be supplied that describe the presentation of the\nlisted tasks.\n",
        "operationId" : "getServiceRequestTasksWithFilter",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "description" : "Service ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "requestId",
          "in" : "path",
          "description" : "Request ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "pageStart",
          "in" : "query",
          "description" : "Paging criteria. The number of pages to present.",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Paging criteria. The number of records on each page.",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "sortField",
          "in" : "query",
          "description" : "Sorting criteria. The name of the field that sorting should be based on.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortDir",
          "in" : "query",
          "description" : "Sorting criteria. The sorting direction (the two valid options being ASCENDING or DESCENDING).",
          "required" : false,
          "type" : "string",
          "enum" : [ "ASCENDING", "DESCENDING" ]
        }, {
          "in" : "body",
          "name" : "filter",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Filter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful Operation.",
            "schema" : {
              "$ref" : "#/definitions/SystemTaskCollection"
            }
          },
          "500" : {
            "description" : "Internal Server Error."
          }
        }
      }
    },
    "/services/{serviceId}/requests/{requestId}/tree" : {
      "get" : {
        "tags" : [ "Service management" ],
        "summary" : "Get Orchestration Tree",
        "description" : "Retrieve the orchestration tree data using the service ID and request ID.\n",
        "operationId" : "getOrchestrationByRequestId",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "description" : "Service ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "requestId",
          "in" : "path",
          "description" : "Request ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "includeStatuses",
          "in" : "query",
          "description" : "Boolean flag (true/false) to include or exclude the status of the tree data.",
          "required" : false,
          "type" : "boolean",
          "default" : false
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation.",
            "schema" : {
              "$ref" : "#/definitions/OrchestrationAndNetworkGraph"
            }
          }
        }
      }
    },
    "/services/{serviceId}/requests/{requestId}/tree-diff" : {
      "get" : {
        "tags" : [ "Service management" ],
        "summary" : "Orchestration Trees Diff",
        "description" : "Retrieve a service orchestration tree 'diff' for a specific service request using the parameters requestId and serviceId.\n",
        "operationId" : "getOrchestrationTreeDiff",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "description" : "Service ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "requestId",
          "in" : "path",
          "description" : "Request ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation.",
            "schema" : {
              "$ref" : "#/definitions/OrchestrationTreeDiff"
            }
          }
        }
      }
    },
    "/services/{serviceId}/requests/{requestId}/version" : {
      "get" : {
        "tags" : [ "Service management" ],
        "summary" : "Get Service Versions For Request",
        "description" : "For a combination of service and request IDs, retrieve all relevant status information. \n\nRETURNED DATA \n- Versions related to the request\n- Tasks and their statuses or states (statuses are returned for planner/wf/cm/er/manager and states for new/tree created/tree approved/tree canceled/wf created/wf started/completed/warning/error) \n",
        "operationId" : "getServiceVersionsForRequest",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "description" : "Service ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "requestId",
          "in" : "path",
          "description" : "Request ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "timeOut",
          "in" : "query",
          "description" : "Not used",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful Operation.",
            "schema" : {
              "$ref" : "#/definitions/ServiceVersionsRequestModel"
            }
          },
          "500" : {
            "description" : "Internal Server Error."
          }
        }
      }
    },
    "/services/{serviceId}/requests/{requestId}/workflow" : {
      "get" : {
        "tags" : [ "Service management" ],
        "summary" : "Get Workflow URI",
        "description" : "Retrieve a workflow URI using a specific request ID and service ID.",
        "operationId" : "getOrderWorkflowURI",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "description" : "Service ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "requestId",
          "in" : "path",
          "description" : "Request ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "String contains the order workflow URL.",
            "schema" : {
              "$ref" : "#/definitions/StringWrapper"
            }
          }
        }
      }
    },
    "/services/{serviceId}/resources" : {
      "get" : {
        "tags" : [ "Service management" ],
        "summary" : "Get Service Resources",
        "description" : "Retrieve service resources for a specific service.\n\nReturn the list of resources currently associated with this service\nversion.\n",
        "operationId" : "getServiceResources",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "description" : "Service ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful Operation.",
            "schema" : {
              "$ref" : "#/definitions/ResourceDetailsCollection"
            }
          },
          "500" : {
            "description" : "Internal Server Error."
          }
        }
      }
    },
    "/services/{serviceId}/tasks" : {
      "get" : {
        "tags" : [ "Service management" ],
        "summary" : "Get Service Tasks",
        "description" : "Retrieve a task list.\n\nParameters can also be supplied that describe the presentation of the returned tasks.\n",
        "operationId" : "getServiceTasks",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "description" : "Service ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "pageStart",
          "in" : "query",
          "description" : "Paging criteria. The number of pages to present.",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Paging criteria. The number of records on each page.",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "sortField",
          "in" : "query",
          "description" : "Sorting criteria. The name of the field that sorting should be based on.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortDir",
          "in" : "query",
          "description" : "Sorting criteria. The sorting direction (the two valid options being ASCENDING or DESCENDING).",
          "required" : false,
          "type" : "string",
          "enum" : [ "ASCENDING", "DESCENDING" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful Operation.",
            "schema" : {
              "$ref" : "#/definitions/SystemTaskCollection"
            }
          },
          "500" : {
            "description" : "Internal Server Error."
          }
        }
      },
      "post" : {
        "tags" : [ "Service management" ],
        "summary" : "Get Service Tasks",
        "description" : "Retrieve a filtered task list.\n\nParameters can also be supplied that describe the presentation of the tasks.\n\nNOTE The HTTP specification does not include a body for GET methods. As a workaround to this limitation (to enable pagination and sorting parameters to be supplied), the POST method is used to fetch data.\n",
        "operationId" : "getServiceTasksWithFilter",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "description" : "Service ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "pageStart",
          "in" : "query",
          "description" : "Paging criteria. The number of pages to present.",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Paging criteria. The number of records on each page.",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "sortField",
          "in" : "query",
          "description" : "Sorting criteria. The name of the field that sorting should be based on.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortDir",
          "in" : "query",
          "description" : "Sorting criteria. The sorting direction (the two valid options being ASCENDING or DESCENDING).",
          "required" : false,
          "type" : "string",
          "enum" : [ "ASCENDING", "DESCENDING" ]
        }, {
          "in" : "body",
          "name" : "filter",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Filter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SystemTaskCollection"
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to retrieve a filtered task list."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/services/{serviceId}/versions" : {
      "get" : {
        "tags" : [ "Service management" ],
        "summary" : "Get Service Versions",
        "description" : "Retrieve information on all relevant service versions.\n\n\nThe operation returns a serviceInfoModel JSON object that lists all\nrelevant service versions.\n\n\nAny combination of parameter values can be used by concatenating them with\nthe pipe (|) character (for example, status=STARTED|DEPLOYED)\n",
        "operationId" : "getServiceVersions",
        "parameters" : [ {
          "name" : "serviceId",
          "in" : "path",
          "description" : "Service ID",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "startTime",
          "in" : "query",
          "description" : "Filter out any service version created before a given time (in 'milliseconds since January 1, 1970, 00:00:00 GMT')\n",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "endTime",
          "in" : "query",
          "description" : "Filter out any service version created after a given time (in 'milliseconds since January 1, 1970, 00:00:00 GMT')",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        }, {
          "name" : "startVersion",
          "in" : "query",
          "description" : "Filter out any version number that is smaller than the given version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "endVersion",
          "in" : "query",
          "description" : "Filter out any version number that is bigger than the given version",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "requestId",
          "in" : "query",
          "description" : "Filter out any service version that was not created for the given request",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "status",
          "in" : "query",
          "description" : "Filter out service versions by status (CREATED, STARTED, DEPLOYED)",
          "required" : false,
          "type" : "string",
          "default" : "DEPLOYED"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful Operation.",
            "schema" : {
              "$ref" : "#/definitions/ServiceInfoModel"
            }
          },
          "500" : {
            "description" : "Internal Server Error."
          }
        }
      }
    },
    "/settings/cms" : {
      "get" : {
        "tags" : [ "Settings" ],
        "summary" : "get CMS entries",
        "description" : "Retrieve a list of Cloud Management System entries.",
        "operationId" : "getCmsEntryList",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/CmsTenantEntryCollection"
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to get a list of Cloud Management System entries."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Settings" ],
        "summary" : "add new CMS entry",
        "description" : "Add a new Cloud Management System entry to the Cloud Manager\nconfiguration data used by NCSO to interact with the Cloud Management System.\n",
        "operationId" : "createCMSEntry",
        "parameters" : [ {
          "in" : "body",
          "name" : "input",
          "description" : "Parameter values describing the CMS entry",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CmsTenantEntry"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to add a new Cloud Management System entry."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/settings/cms/{cmsEntryName}" : {
      "put" : {
        "tags" : [ "Settings" ],
        "summary" : "Update CMS entry",
        "description" : "Update a Cloud Management System entry in the Cloud Manager\nconfiguration data used by NCSO to interact with the Cloud Management System.\n",
        "operationId" : "updateCMSEntry",
        "parameters" : [ {
          "name" : "cmsEntryName",
          "in" : "path",
          "description" : "The name of the CMS entry",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "input",
          "description" : "Parameter values describing the CMS update details",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/CmsTenantEntry"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Cloud Management System entry updated successfully."
          },
          "500" : {
            "description" : "Failed to update the Cloud Management System entry."
          }
        }
      },
      "delete" : {
        "tags" : [ "Settings" ],
        "summary" : "delete CMS entry",
        "description" : "Delete a Cloud Management System entry from the Cloud Manager configuration data used by NCSO to interact with the Cloud Management System.",
        "operationId" : "deleteCmsEntry",
        "parameters" : [ {
          "name" : "cmsEntryName",
          "in" : "path",
          "description" : "The logical name of the Southbound endpoint.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Cloud Management System entry deleted successfully."
          },
          "500" : {
            "description" : "Failed to delete the Cloud Management System entry."
          }
        }
      }
    },
    "/settings/credentials" : {
      "get" : {
        "tags" : [ "Settings" ],
        "summary" : "Get credentials list",
        "description" : "Retrieve a list of all existing credentials.",
        "operationId" : "getCredentials",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/TenantAwareCredentialsCollection"
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to get a credentials list."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Settings" ],
        "summary" : "Add credentials",
        "description" : "Add new Cloud Management System credentials to the Cloud Manager\nconfiguration data used by NCSO to interact with the Cloud Management System.\n",
        "operationId" : "createCredentials",
        "parameters" : [ {
          "in" : "body",
          "name" : "input",
          "description" : "Parameter values describing the credentials.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TenantAwareCredentials"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to add credentials."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/settings/credentials/{name}" : {
      "put" : {
        "tags" : [ "Settings" ],
        "summary" : "Update credentials",
        "description" : "Update Cloud Management System credentials in the Cloud Manager configuration data used by NCSO to interact with the Cloud Management System.\n",
        "operationId" : "updateCredentials",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Credentials name",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "input",
          "description" : "Parameter values describing the credentials.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/TenantAwareCredentialsUpdate"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Credentials updated successfully."
          },
          "500" : {
            "description" : "Failed to update credentials."
          }
        }
      },
      "delete" : {
        "tags" : [ "Settings" ],
        "summary" : "delete credentials",
        "description" : "Delete Cloud Management System credentials from the Cloud Manager configuration data used by NCSO to interact with the Cloud Management System.",
        "operationId" : "deleteCredentials",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Credentials name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Credentials deleted successfully."
          },
          "500" : {
            "description" : "Failed to delete credentials."
          }
        }
      }
    },
    "/settings/er" : {
      "get" : {
        "tags" : [ "Settings" ],
        "summary" : "get event settings",
        "description" : "Retrieve all event settings.",
        "operationId" : "getEventSetting",
        "parameters" : [ ],
        "responses" : {
          "default" : {
            "description" : "Successful operation."
          }
        }
      }
    },
    "/settings/er/default-events-setting" : {
      "get" : {
        "tags" : [ "Settings" ],
        "summary" : "get default events settings",
        "description" : "Retrieve the default event setting.",
        "operationId" : "getDefaultEventSetting",
        "parameters" : [ ],
        "responses" : {
          "default" : {
            "description" : "Successful operation."
          }
        }
      }
    },
    "/settings/er/default-events-setting/{eventType}" : {
      "get" : {
        "tags" : [ "Settings" ],
        "summary" : "get default event setting parameters",
        "description" : "Retrieve the parameters of the default event setting for a specific event type.",
        "operationId" : "getDefaultEventSettingParams",
        "parameters" : [ {
          "name" : "eventType",
          "in" : "path",
          "description" : "Event type",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "Successful operation."
          }
        }
      },
      "post" : {
        "tags" : [ "Settings" ],
        "summary" : "add default event settings parameters",
        "description" : "Add the default event settings parameters for a specific event type.",
        "operationId" : "addDefaultEventSettingParams",
        "parameters" : [ {
          "name" : "eventType",
          "in" : "path",
          "description" : "Event type",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "input",
          "description" : "Describes the parameters",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/EventSettingParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Event settings added successfully."
          },
          "500" : {
            "description" : "Failed to add event settings."
          }
        }
      },
      "delete" : {
        "tags" : [ "Settings" ],
        "summary" : "delete default event settings parameters",
        "description" : "Delete the default event settings parameters for a specific event type.",
        "operationId" : "deleteDefaultEventSettingParams",
        "parameters" : [ {
          "name" : "eventType",
          "in" : "path",
          "description" : "Event type",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "Event settings deleted successfully."
          },
          "500" : {
            "description" : "Failed to delete event settings."
          }
        }
      }
    },
    "/settings/er/{eventType}" : {
      "get" : {
        "tags" : [ "Settings" ],
        "summary" : "get event setting parameters",
        "description" : "get event setting parameters",
        "operationId" : "getEventSettingParams",
        "parameters" : [ {
          "name" : "eventType",
          "in" : "path",
          "description" : "Event type",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "description" : "Service ID",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nodeInstanceId",
          "in" : "query",
          "description" : "Node instance ID",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "Successful operation."
          }
        }
      },
      "post" : {
        "tags" : [ "Settings" ],
        "summary" : "add event settings parameters",
        "description" : "Add event setting parameters for a specific event type.",
        "operationId" : "addEventSettingParams",
        "parameters" : [ {
          "name" : "eventType",
          "in" : "path",
          "description" : "Event type",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "description" : "Service ID",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nodeInstanceId",
          "in" : "query",
          "description" : "Node instance ID",
          "required" : false,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "input",
          "description" : "Parameter values describing the event settings",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/EventSettingParams"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "Event settings added successfully."
          },
          "500" : {
            "description" : "Failed to add event settings."
          }
        }
      },
      "delete" : {
        "tags" : [ "Settings" ],
        "summary" : "delete event settings parameters",
        "description" : "Delete event setting parameters for a specific event type.",
        "operationId" : "deleteEventSettingParams",
        "parameters" : [ {
          "name" : "eventType",
          "in" : "path",
          "description" : "Event type",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "serviceId",
          "in" : "query",
          "description" : "Service ID",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "nodeInstanceId",
          "in" : "query",
          "description" : "Node instance ID",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to delete event settings parameters."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/settings/images" : {
      "get" : {
        "tags" : [ "Settings" ],
        "summary" : "Get all image mappings",
        "description" : "Retrieve the mapping between a model image reference ID and real image IDs.\n",
        "operationId" : "getImageMappings",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/ImageMappingCollection"
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to get image mappings."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Settings" ],
        "summary" : "Create a new image mapping",
        "description" : "Set mappings between a model image reference ID and real image IDs.\n",
        "operationId" : "createImageMapping",
        "parameters" : [ {
          "in" : "body",
          "name" : "input",
          "description" : "Image Mapping",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ImageMapping"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to create a new image mapping."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/settings/images/{imageRefId}" : {
      "get" : {
        "tags" : [ "Settings" ],
        "summary" : "Retrieves Image Mapping by imageRefId",
        "description" : "Retrieve the mapping between a specific model image and real image.\n\nThe mapping uses the model image's reference ID and the ID of the real\nimage.\n",
        "operationId" : "getImageMapping",
        "parameters" : [ {
          "name" : "imageRefId",
          "in" : "path",
          "description" : "Image Reference ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to get image mappings."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "Settings" ],
        "summary" : "Update image mapping",
        "description" : "Set or delete mappings between a specific model image and real image at a specific location.\nThe mapping uses the model image's reference ID and the ID of the real image.\n",
        "operationId" : "updateImageMapping",
        "parameters" : [ {
          "name" : "imageRefId",
          "in" : "path",
          "description" : "Image reference ID.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "deleteLocation",
          "in" : "query",
          "description" : "Boolean flag to indicate whether or not to delete the location.\ndeleteLocation={true/false}\n",
          "required" : true,
          "type" : "boolean"
        }, {
          "in" : "body",
          "name" : "input",
          "description" : "Parameter values describing the map object which contains the keys 1. location, 2. newLocation and 3. imageId.\n",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/ImageMappingUpdate"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to update image mappings."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Settings" ],
        "summary" : "Delete image mapping",
        "description" : "Delete a mapping between a specific model image and a real image.\nThe mapping links the model image's reference ID and the ID of the real image.\n",
        "operationId" : "deleteImageMapping",
        "parameters" : [ {
          "name" : "imageRefId",
          "in" : "path",
          "description" : "Image reference ID",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "default" : {
            "description" : "Successful operation."
          }
        }
      }
    },
    "/settings/passwords" : {
      "post" : {
        "tags" : [ "Settings" ],
        "summary" : "Add or update passwords",
        "description" : "Add or update password credentials (user name and password) for\naccessing external password-protected resources\n",
        "operationId" : "createPassword",
        "parameters" : [ {
          "in" : "body",
          "name" : "input",
          "description" : "Parameter values describing the password credentials unique name,\nusername and password.\n",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Credentials"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to create a password."
          },
          "404" : {
            "description" : "Not found"
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/settings/passwords/{name}" : {
      "put" : {
        "tags" : [ "Settings" ],
        "summary" : "Update password",
        "description" : "Update a named username-password pair from the repository",
        "operationId" : "updatePassword",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the password",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "input",
          "description" : "Parameter values describing the user name and password.\n",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/CredentialsUpdate"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request"
          },
          "401" : {
            "description" : "Unauthorized"
          },
          "404" : {
            "description" : "Not found"
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "Settings" ],
        "summary" : "Delete passwords",
        "description" : "Delete a named username-password pair from the repository.",
        "operationId" : "deletePassword",
        "parameters" : [ {
          "name" : "name",
          "in" : "path",
          "description" : "Name of the password.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to delete a password."
          },
          "404" : {
            "description" : "Not found. The named username-password pair was not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/settings/tenants" : {
      "get" : {
        "tags" : [ "Settings" ],
        "summary" : "List Tenants",
        "description" : "Get a list of all tenants.",
        "operationId" : "getTenantList",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successful operation.",
            "schema" : {
              "$ref" : "#/definitions/NCSOTenantEntryCollection"
            }
          },
          "500" : {
            "description" : "Internal Server Error."
          }
        }
      },
      "post" : {
        "tags" : [ "Settings" ],
        "summary" : "Add a Tenant",
        "description" : "Create a new tenant.",
        "operationId" : "addTenant",
        "parameters" : [ {
          "in" : "body",
          "name" : "input",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/NCSOTenantEntry"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to create a tenant."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/settings/tenants/{tenantName}/{forceInd}" : {
      "delete" : {
        "tags" : [ "Settings" ],
        "summary" : "Delete a Tenant",
        "description" : "Delete or Suspend a tenant.\nIdentify the tenant using its name, and use the forceInd flag to force the delete operation (true/false).\n",
        "operationId" : "deleteTenant",
        "parameters" : [ {
          "name" : "tenantName",
          "in" : "path",
          "description" : "Tenant name",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "forceInd",
          "in" : "path",
          "description" : "Boolean flag to force the deletion (true/false).",
          "required" : true,
          "type" : "boolean"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to delete tenants."
          },
          "404" : {
            "description" : "Not found. The tenant is not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/sysconfig/latest" : {
      "get" : {
        "tags" : [ "System configuration" ],
        "summary" : "List system configurations",
        "description" : "Retrieve and list all available system configurations.",
        "operationId" : "getConfigurations",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "Successful operation.",
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object",
                "properties" : { }
              }
            }
          },
          "500" : {
            "description" : "Internal server error."
          }
        }
      },
      "post" : {
        "tags" : [ "System configuration" ],
        "summary" : "Store system configuration",
        "description" : "Add configuration entries to the data store.",
        "operationId" : "storeConfiguration",
        "parameters" : [ {
          "in" : "body",
          "name" : "input",
          "description" : "Key-value pairs of configuration entries.",
          "required" : true,
          "schema" : {
            "type" : "object"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to store system configuration."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/sysconfig/latest/{key}" : {
      "get" : {
        "tags" : [ "System configuration" ],
        "summary" : "Retrieve system configuration",
        "description" : "Retrieve the details of a specific configuration.",
        "operationId" : "getConfiguration",
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "description" : "The key identifies the configuration. It may contain slashes. For example, it may be common/logs/level.",
          "required" : true,
          "type" : "string",
          "pattern" : " .+"
        } ],
        "responses" : {
          "200" : {
            "description" : "Successful operation.",
            "schema" : {
              "type" : "object",
              "additionalProperties" : {
                "type" : "object",
                "properties" : { }
              }
            }
          },
          "500" : {
            "description" : "Internal server error."
          }
        }
      },
      "delete" : {
        "tags" : [ "System configuration" ],
        "summary" : "Remove system configuration",
        "description" : "Remove a specific configuration.",
        "operationId" : "removeConfiguration",
        "parameters" : [ {
          "name" : "key",
          "in" : "path",
          "required" : true,
          "type" : "string",
          "pattern" : " .+"
        } ],
        "responses" : {
          "200" : {
            "description" : "System configuration successfully removed."
          },
          "500" : {
            "description" : "Internal server error."
          }
        }
      }
    },
    "/system-information/events" : {
      "get" : {
        "tags" : [ "System information" ],
        "summary" : "Get all events",
        "description" : "Get all events.\n\nParameters can be supplied that describe the presentation of the events\non the results pages.\n",
        "operationId" : "getEvents",
        "parameters" : [ {
          "name" : "pageStart",
          "in" : "query",
          "description" : "Paging criteria. The number of pages to present.",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Paging criteria. The number of records on each page.",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "sortField",
          "in" : "query",
          "description" : "Sorting criteria. The name of the field that sorting should be based on.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortDir",
          "in" : "query",
          "description" : "Sorting criteria. The sorting direction (the two valid options being ASCENDING or DESCENDING).",
          "required" : false,
          "type" : "string",
          "enum" : [ "ASCENDING", "DESCENDING" ]
        }, {
          "name" : "tenants",
          "in" : "query",
          "description" : "Tenants. For NCSO Admin user only. Fetch events from given tenants. Possible values : _all_ - from all tenants OR TenantA,TenantB - from TenantA + TenantB",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SystemEventCollection"
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to get events using this operation."
          },
          "403" : {
            "description" : "Forbidden. The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "System information" ],
        "summary" : "Query system events with filter",
        "description" : "Get all system event information for events matching the filter.\n\nParameters can be supplied that describe the presentation of the events\non the results pages.\n",
        "operationId" : "getEventsWithFilter",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "pageStart",
          "in" : "query",
          "description" : "Paging criteria. The number of pages to present.",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Paging criteria. The number of records on each page.",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "sortField",
          "in" : "query",
          "description" : "Sorting criteria. The name of the field that sorting should be based on.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortDir",
          "in" : "query",
          "description" : "Sorting criteria. The sorting direction (the two valid options being ASCENDING or DESCENDING).",
          "required" : false,
          "type" : "string",
          "enum" : [ "ASCENDING", "DESCENDING" ]
        }, {
          "in" : "body",
          "name" : "filter",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Filter"
          }
        }, {
          "name" : "tenants",
          "in" : "query",
          "description" : "Tenants. For NCSO Admin user only. Fetch events from given tenants. Possible values : _all_ - from all tenants OR TenantA,TenantB - from TenantA + TenantB",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SystemEventCollection"
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to perform the requested operation"
          },
          "403" : {
            "description" : "Forbidden. The request was valid, but the server is refusing action. The user might not have the necessary permissions for a resource, or may need an account of some sort."
          },
          "404" : {
            "description" : "Not found"
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/system-information/requests" : {
      "get" : {
        "tags" : [ "System information" ],
        "summary" : "Get all service requests",
        "description" : "Get all service requests.\n\nParameters can be supplied that describe the presentation of the\nrequests on the results pages.\n",
        "operationId" : "getRequests",
        "parameters" : [ {
          "name" : "pageStart",
          "in" : "query",
          "description" : "Paging criteria. The number of pages to present.",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Paging criteria. The number of records on each page.",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "sortField",
          "in" : "query",
          "description" : "Sorting criteria. The name of the field that sorting should be based on.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortDir",
          "in" : "query",
          "description" : "Sorting criteria. The sorting direction (the two valid options being ASCENDING or DESCENDING).",
          "required" : false,
          "type" : "string",
          "enum" : [ "ASCENDING", "DESCENDING" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/ServiceDetailsCollection"
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to perform the requested operation"
          },
          "404" : {
            "description" : "Not found"
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "System information" ],
        "summary" : "Get system information for service requests",
        "description" : "Retrieve all system event information for service requests matching the       criteria given.\n\nParameters can be supplied that describe the presentation of the\nrequests on the results pages.\n",
        "operationId" : "getRequestsWithFilter",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "pageStart",
          "in" : "query",
          "description" : "Paging criteria. The number of pages to present.",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Paging criteria. The number of records on each page.",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "sortField",
          "in" : "query",
          "description" : "Sorting criteria. The name of the field that sorting should be based on.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortDir",
          "in" : "query",
          "description" : "Sorting criteria. The sorting direction (the two valid options being ASCENDING or DESCENDING).",
          "required" : false,
          "type" : "string",
          "enum" : [ "ASCENDING", "DESCENDING" ]
        }, {
          "in" : "body",
          "name" : "filter",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Filter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/ServiceDetailsCollection"
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error,",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/tasks" : {
      "get" : {
        "tags" : [ "Task management" ],
        "summary" : "Get all tasks",
        "description" : "Get all task events matching the given criteria.\n\nParameters can be supplied that describe the presentation of the tasks\non the results pages.\n",
        "operationId" : "getSystemTasks",
        "parameters" : [ {
          "name" : "pageStart",
          "in" : "query",
          "description" : "Paging criteria. The number of pages to present.",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Paging criteria. The number of records on each page.",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "sortField",
          "in" : "query",
          "description" : "Sorting criteria. The name of the field that sorting should be based on.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortDir",
          "in" : "query",
          "description" : "Sorting criteria. The sorting direction (the two valid options being ASCENDING or DESCENDING).",
          "required" : false,
          "type" : "string",
          "enum" : [ "ASCENDING", "DESCENDING" ]
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SystemTaskCollection"
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "404" : {
            "description" : "Not found"
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "Task management" ],
        "summary" : "Query system tasks with extended filter",
        "description" : "Get all system event information for tasks matching the criteria\ngiven.\n\nParameters can be supplied that describe the presentation of the tasks\non the results pages.\n",
        "operationId" : "getSystemTasksWithFilter",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "pageStart",
          "in" : "query",
          "description" : "Paging criteria. The number of pages to present.",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "pageSize",
          "in" : "query",
          "description" : "Paging criteria. The number of records on each page.",
          "required" : false,
          "type" : "integer"
        }, {
          "name" : "sortField",
          "in" : "query",
          "description" : "Sorting criteria. The name of the field that sorting should be based on.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "sortDir",
          "in" : "query",
          "description" : "Sorting criteria. The sorting direction (the two valid options being ASCENDING or DESCENDING).",
          "required" : false,
          "type" : "string",
          "enum" : [ "ASCENDING", "DESCENDING" ]
        }, {
          "in" : "body",
          "name" : "filter",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/Filter"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/SystemTaskCollection"
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/tasks/{taskID}/handle" : {
      "post" : {
        "tags" : [ "Task management" ],
        "summary" : "Handle task",
        "description" : "Handle manual tasks as they are raised during the service lifecycle. NOTE This is relevant when automatic operations are not allowed or not defined. \n\nFor example, the service creation request contains several options (such as confirmation) that define the behavior of some components in NCSO. For instance, Planner decomposes a service tree and immediately passes control to Workflow Manager by default. It is possible to use the service request to specify a user confirmation option such that each time the service tree is re-planned a manual task is created for user to approve/reject the updated service topology. In this case, this handle task API contains user's resolution (yes or no).\n",
        "operationId" : "handleTask",
        "parameters" : [ {
          "name" : "taskID",
          "in" : "path",
          "description" : "Task ID",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "input",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/TaskResolution"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/users" : {
      "get" : {
        "tags" : [ "User management" ],
        "summary" : "Query users",
        "description" : "Get list of users.",
        "operationId" : "getUsers",
        "parameters" : [ ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/UserCollection"
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to perform the requested operation."
          },
          "404" : {
            "description" : "Not found"
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "User management" ],
        "summary" : "Create user",
        "description" : "Add a new user.\n\nIf the user already exists, an exception is thrown.\n",
        "operationId" : "createUser",
        "parameters" : [ {
          "in" : "body",
          "name" : "input",
          "description" : "Parameter values describing the user.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/User"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to create the user."
          },
          "404" : {
            "description" : "Not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/users/{userName}/permissions" : {
      "get" : {
        "tags" : [ "User management" ],
        "summary" : "Get Permissions",
        "description" : "Retrieve permissions for a specific user. The user is identified by their user name.",
        "operationId" : "getPermissions",
        "parameters" : [ {
          "name" : "userName",
          "in" : "path",
          "description" : "User name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/StringCollection"
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to get role permissions for a specific user."
          },
          "404" : {
            "description" : "Not found. The user name is not found."
          },
          "500" : {
            "description" : "Internal server error.",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/users/{userName}/roles" : {
      "get" : {
        "tags" : [ "User management" ],
        "summary" : "Get Roles",
        "description" : "Returns user's role names.",
        "operationId" : "getUserRoles",
        "parameters" : [ {
          "name" : "userName",
          "in" : "path",
          "description" : "User name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/StringCollection"
            }
          },
          "400" : {
            "description" : "Bad request. The request was incorrect or corrupted, so the server was unable to understand it."
          },
          "401" : {
            "description" : "Unauthorized. The user is not authorized to perform the requested operation."
          },
          "403" : {
            "description" : "Forbidden"
          },
          "404" : {
            "description" : "Not found"
          },
          "500" : {
            "description" : "Internal server error",
            "schema" : {
              "$ref" : "#/definitions/ErrorModel"
            }
          }
        }
      }
    },
    "/users/{username}" : {
      "get" : {
        "tags" : [ "User management" ],
        "summary" : "Get user information",
        "description" : "Get specific user information by name.",
        "operationId" : "getUserByName",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "User name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK",
            "schema" : {
              "$ref" : "#/definitions/User"
            }
          },
          "500" : {
            "description" : "Internal Server Error."
          }
        }
      },
      "put" : {
        "tags" : [ "User management" ],
        "summary" : "Update User",
        "description" : "Update user information. The user to update is selected using their user name.\n",
        "operationId" : "modifyUser",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "User name",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "input",
          "description" : "Describes the updated user details",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ModifyUserObject"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "500" : {
            "description" : "Internal Server Error."
          }
        }
      },
      "delete" : {
        "tags" : [ "User management" ],
        "summary" : "Delete User",
        "description" : "Delete a specific user.\n\nThe user to delete is selected using their user name.\n",
        "operationId" : "deleteUserByName",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "User name",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "500" : {
            "description" : "Internal Server Error."
          }
        }
      }
    },
    "/users/{username}/password" : {
      "put" : {
        "tags" : [ "User management" ],
        "summary" : "Update User's password",
        "description" : "Update a user's password.\nThe user whose password is being updated is selected using their user name.\n",
        "operationId" : "modifyUserPassword",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "User name",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "input",
          "description" : "Parameter values describing the password details.",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/ModifyUserPasswordObject"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "500" : {
            "description" : "Internal Server Error."
          }
        }
      }
    },
    "/users/{username}/status" : {
      "put" : {
        "tags" : [ "User management" ],
        "summary" : "Enable User",
        "description" : "Enable a specific user after suspension. The user that is being enabled is selected using their user name.\n\nIf the user does not exist, an exception is thrown.\n",
        "operationId" : "changeStatus",
        "parameters" : [ {
          "name" : "username",
          "in" : "path",
          "description" : "User name",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "input",
          "description" : "",
          "required" : false,
          "schema" : {
            "$ref" : "#/definitions/UserStatusUpdate"
          }
        }, {
          "name" : "disableUntilTime",
          "in" : "query",
          "description" : "Indicates when the user should remain disabled until. Required when user is disabled.",
          "required" : false,
          "type" : "integer",
          "format" : "int64"
        } ],
        "responses" : {
          "200" : {
            "description" : "OK"
          },
          "500" : {
            "description" : "Internal Server Error."
          }
        }
      }
    }
  },
  "securityDefinitions" : {
    "UserSecurity" : {
      "type" : "apiKey",
      "name" : "X-AUTH-TOKEN",
      "in" : "header"
    }
  },
  "definitions" : {
    "Artifact" : {
      "type" : "object",
      "properties" : {
        "artifactType" : {
          "$ref" : "#/definitions/ArtifactTypeEnum"
        },
        "artifactUrl" : {
          "type" : "string"
        },
        "attributes" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Attribute"
          }
        }
      }
    },
    "ArtifactTypeEnum" : {
      "type" : "string",
      "enum" : [ "DEPLOYMENT_ARTIFACT", "IMPLEMENTATION_ARTIFACT" ]
    },
    "Attribute" : {
      "type" : "object",
      "properties" : {
        "oid" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string"
        },
        "attributeDomain" : {
          "$ref" : "#/definitions/AttributeDomainEnum"
        },
        "displayName" : {
          "type" : "string"
        },
        "locale" : {
          "type" : "string"
        },
        "mandatory" : {
          "type" : "boolean",
          "default" : false
        },
        "attributeStatus" : {
          "$ref" : "#/definitions/AttributeStatusEnum"
        },
        "labels" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "AttributeCatalogTemplate" : {
      "type" : "object",
      "properties" : {
        "oid" : {
          "type" : "string"
        },
        "code" : {
          "type" : "string"
        },
        "defaultValue" : {
          "type" : "string"
        },
        "attributeContentType" : {
          "$ref" : "#/definitions/AttributeContentTypeEnum"
        },
        "minLength" : {
          "type" : "integer",
          "format" : "int32"
        },
        "maxLength" : {
          "type" : "integer",
          "format" : "int32"
        },
        "pattern" : {
          "type" : "string"
        },
        "minValue" : {
          "type" : "string"
        },
        "maxValue" : {
          "type" : "string"
        },
        "precision" : {
          "type" : "integer",
          "format" : "int32"
        },
        "validValues" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "AttributeContentTypeEnum" : {
      "type" : "string",
      "description" : "One of the following options:\n  FT - Free text\n  NM - Number\n  LV - List of values\n  IP - IP address\n  URL - URL\n  UN - Unknown\n  PWD - Password\n",
      "enum" : [ "FT", "NM", "LV", "IP", "URL", "UN", "PWD" ]
    },
    "AttributeDomainEnum" : {
      "type" : "string",
      "enum" : [ "ParentDriven", "PolicyDriven", "Static", "LinkDriven", "ExecutionDriven", "Compute" ]
    },
    "AttributeMappingDirectionEnum" : {
      "type" : "string",
      "enum" : [ "SourceToTarget", "TargetToSource" ]
    },
    "AttributeMappingTypeEnum" : {
      "type" : "string",
      "enum" : [ "Copy", "Compute", "Tokenize" ]
    },
    "AttributeStatusEnum" : {
      "type" : "string",
      "enum" : [ "COMPLETED", "STATIC_MANDATORY_NON_EXISTING", "STATIC_MANDATORY_EMPTY_VALUE", "STATIC_OPTIONAL_NON_EXISTING", "STATIC_OPTIONAL_EMPTY_VALUE", "PARENT_DRIVEN_MANDATORY_NON_EXISTING", "PARENT_DRIVEN_MANDATORY_EMPTY_VALUE", "PARENT_DRIVEN_OPTIONAL_NON_EXISTING", "PARENT_DRIVEN_OPTIONAL_EMPTY_VALUE", "POLICY_DRIVEN_MANDATORY_UNKNOWN", "POLICY_DRIVEN_MANDATORY_EMPTY_VALUE", "POLICY_DRIVEN_OPTIONAL_UNKNOWN", "POLICY_DRIVEN_OPTIONAL_EMPTY_VALUE" ]
    },
    "AuthenticationTypeEnum" : {
      "type" : "string",
      "enum" : [ "DEFAULT" ]
    },
    "CatalogDistributionAttributeTemplateInfo" : {
      "type" : "object",
      "properties" : {
        "action" : {
          "$ref" : "#/definitions/DistributionActionEnum"
        },
        "attributeTemplates" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/AttributeCatalogTemplate"
          }
        }
      }
    },
    "CatalogDistributionNodeInfo" : {
      "type" : "object",
      "properties" : {
        "action" : {
          "$ref" : "#/definitions/DistributionActionEnum"
        },
        "nodeTemplates" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NetworkServiceNodeTemplate"
          }
        }
      }
    },
    "ClientRoleResponseObject" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "description" : {
          "type" : "string"
        },
        "parent" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string",
          "description" : "Role Name"
        },
        "permissionNames" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "CmsEntryCredentials" : {
      "type" : "object",
      "properties" : {
        "cmsEntry" : {
          "$ref" : "#/definitions/CmsTenantEntry"
        },
        "credentials" : {
          "$ref" : "#/definitions/Credentials"
        }
      }
    },
    "CmsInitData" : {
      "type" : "object",
      "properties" : {
        "version" : {
          "type" : "integer",
          "format" : "int64"
        },
        "modifiedTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "cmsEntryCredentialsList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/CmsEntryCredentials"
          }
        },
        "dataCenterList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/DataCenter"
          }
        },
        "passwords" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Password"
          }
        }
      }
    },
    "CmsTenantEntry" : {
      "type" : "object",
      "required" : [ "credentialsName", "endpoint", "locationUrl", "name", "type" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Unique logical name",
          "pattern" : "[a-zA-Z0-9_-]+"
        },
        "type" : {
          "type" : "string",
          "description" : "Endpoint type",
          "pattern" : "[a-zA-Z0-9_-]+"
        },
        "endpoint" : {
          "type" : "string",
          "description" : "Endpoint URI",
          "pattern" : "[a-zA-Z0-9_:/.-]+"
        },
        "credentialsName" : {
          "type" : "string",
          "description" : "Logical identifier of credentials entry",
          "pattern" : "[a-zA-Z0-9_-]+"
        },
        "datacenterId" : {
          "type" : "string",
          "description" : "Data center identifier",
          "pattern" : "[a-zA-Z0-9_-]+"
        },
        "locationUrl" : {
          "type" : "string",
          "description" : "Location URL",
          "pattern" : "[a-zA-Z0-9_:/.-?#]+"
        }
      }
    },
    "CmsTenantEntryCollection" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Collection"
      }, {
        "type" : "object",
        "properties" : {
          "results" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/CmsTenantEntry"
            }
          }
        }
      } ]
    },
    "Collection" : {
      "type" : "object",
      "properties" : {
        "listCount" : {
          "type" : "integer"
        }
      }
    },
    "Confirmation" : {
      "type" : "object",
      "properties" : {
        "confirmationInd" : {
          "type" : "boolean",
          "default" : false
        },
        "timeOut" : {
          "type" : "integer",
          "format" : "int64"
        },
        "defaultAction" : {
          "$ref" : "#/definitions/ConfirmationActionEnum"
        }
      }
    },
    "ConfirmationActionEnum" : {
      "type" : "string",
      "enum" : [ "Approve", "Cancel" ]
    },
    "ContrailServiceInstance" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ResourceDetails"
      }, {
        "type" : "object",
        "properties" : {
          "uuid" : {
            "type" : "string"
          },
          "managementNetwork" : {
            "type" : "string"
          },
          "leftNetwork" : {
            "type" : "string"
          },
          "rightNetwork" : {
            "type" : "string"
          },
          "otherNetworks" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          },
          "virtualMachines" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "CreateUserObject" : {
      "type" : "object",
      "properties" : {
        "firstName" : {
          "type" : "string"
        },
        "lastName" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        },
        "expDate" : {
          "type" : "integer",
          "format" : "int64"
        },
        "username" : {
          "type" : "string"
        },
        "password" : {
          "type" : "string"
        }
      }
    },
    "Credentials" : {
      "type" : "object",
      "required" : [ "name", "password", "username" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "pattern" : "[a-zA-Z0-9_-]+"
        },
        "username" : {
          "type" : "string",
          "pattern" : "[a-zA-Z0-9_:/.@-]+"
        },
        "password" : {
          "type" : "string"
        }
      }
    },
    "CredentialsUpdate" : {
      "type" : "object",
      "required" : [ "password", "username" ],
      "properties" : {
        "username" : {
          "type" : "string",
          "pattern" : "[a-zA-Z0-9_:/.@-]+"
        },
        "password" : {
          "type" : "string"
        }
      }
    },
    "CredentialsVaultData" : {
      "type" : "object",
      "required" : [ "attributes", "name", "secure" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "Unique name of the data entry"
        },
        "secure" : {
          "type" : "array",
          "description" : "Name of attributes to be encrypted",
          "items" : {
            "type" : "string"
          }
        },
        "attributes" : {
          "type" : "object",
          "description" : "Key/value pairs of data attributes",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      },
      "description" : ""
    },
    "DataCenter" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "location" : {
          "$ref" : "#/definitions/Location"
        }
      }
    },
    "DatastoreRecordDetails" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Record unique identifier"
        },
        "type" : {
          "type" : "string",
          "description" : "Type of stored objects, used to parse the record JSON"
        },
        "record" : {
          "type" : "object",
          "description" : "JSON object, specific record to be stored",
          "properties" : { }
        }
      }
    },
    "DatastoreRecordDetailsCollection" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Collection"
      }, {
        "type" : "object",
        "properties" : {
          "results" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/DatastoreRecordDetails"
            }
          }
        }
      } ]
    },
    "DescriptionTemplate" : {
      "type" : "object",
      "properties" : {
        "Value" : {
          "type" : "string"
        },
        "locale" : {
          "type" : "string"
        }
      }
    },
    "DistributionActionEnum" : {
      "type" : "string",
      "enum" : [ "NEW", "MODIFY", "ADD_OR_MODIFY" ]
    },
    "EREventTypeEnum" : {
      "type" : "string",
      "enum" : [ "CPU_THRESHOLD_EXCEEDED", "SNMP_TRAP_INFO", "WORKFLOW_ERROR", "VM_NOT_ACTIVE", "NO_AVALIABLE_SPACE_ON_DISK", "EXTERNAL" ]
    },
    "ErrorModel" : {
      "type" : "object",
      "required" : [ "code", "message" ],
      "properties" : {
        "code" : {
          "type" : "string",
          "description" : "Error code"
        },
        "message" : {
          "type" : "string",
          "description" : "Error message"
        }
      },
      "description" : "Error response information"
    },
    "EventKeys" : {
      "type" : "object",
      "properties" : {
        "values" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Value"
          }
        }
      }
    },
    "EventPublisherEnum" : {
      "type" : "string",
      "enum" : [ "MONITORING", "WFM", "EXTERNAL" ]
    },
    "EventSettingParams" : {
      "type" : "object",
      "properties" : {
        "eventKeyComponents" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "ttl" : {
          "type" : "integer",
          "format" : "int64"
        },
        "duplicationInterval" : {
          "type" : "integer",
          "format" : "int64"
        },
        "stagingInterval" : {
          "type" : "integer",
          "format" : "int64"
        },
        "priority" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "EventStateEnum" : {
      "type" : "string",
      "enum" : [ "ACTIVE", "SKIPPED" ]
    },
    "EventStateReasonEnum" : {
      "type" : "string",
      "enum" : [ "OLD", "DUPLICATED", "KEY_MAPPING_ERROR", "NOT_FOUND_BY_GLOBAL_SEARCH", "INTERNAL_ERROR", "NOT_IN_CACHE", "IN_CACHE_AFTER_EVENT_DUPLICATION_EXPIRED", "IN_CACHE_WITHOUT_ENRICH_DATA_OR_EXPIRED" ]
    },
    "ExecutionStateAttributeParameterTemplate" : {
      "type" : "object",
      "properties" : {
        "value" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        }
      }
    },
    "ExecutionStateConditionTemplate" : {
      "type" : "object",
      "properties" : {
        "value" : {
          "type" : "string"
        }
      }
    },
    "ExecutionStateDataFlowTemplate" : {
      "type" : "object",
      "properties" : {
        "value" : {
          "type" : "string"
        }
      }
    },
    "ExecutionStateImplementation" : {
      "type" : "object",
      "properties" : {
        "workFlowImplementation" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/WorkFlowImplementation"
          }
        }
      }
    },
    "ExecutionStateNameTemplate" : {
      "type" : "object",
      "properties" : {
        "value" : {
          "type" : "string"
        },
        "locale" : {
          "type" : "string"
        }
      }
    },
    "ExecutionStateTransitionMap" : {
      "type" : "object",
      "properties" : {
        "states" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NetworkServiceNodeExecutionStateTemplate"
          }
        },
        "infrastructureSource" : {
          "type" : "string"
        }
      }
    },
    "Filter" : {
      "type" : "object",
      "properties" : {
        "filterCriteria" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/FilterCriterion"
          }
        },
        "logicalRelation" : {
          "$ref" : "#/definitions/FilterLogicalRelationEnum"
        },
        "subFilters" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Filter"
          }
        }
      }
    },
    "FilterCriterion" : {
      "type" : "object",
      "properties" : {
        "criterionValue" : {
          "type" : "string"
        },
        "criterionValues" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "fieldName" : {
          "type" : "string"
        },
        "operator" : {
          "$ref" : "#/definitions/FilterCriterionOperatorEnum"
        },
        "type" : {
          "$ref" : "#/definitions/FilterCriterionTypeEnum"
        }
      }
    },
    "FilterCriterionOperatorEnum" : {
      "type" : "string",
      "enum" : [ "CONTAINS", "EQUALS", "BETWEEN", "GREATER_THAN", "SMALLER_THAN" ]
    },
    "FilterCriterionTypeEnum" : {
      "type" : "string",
      "enum" : [ "STRING", "INTEGER", "FLOAT", "DATE" ]
    },
    "FilterLogicalRelationEnum" : {
      "type" : "string",
      "enum" : [ "AND", "OR" ]
    },
    "GenKeyParams" : {
      "type" : "object",
      "properties" : {
        "instanceId" : {
          "type" : "string"
        },
        "componentTypeName" : {
          "type" : "string"
        },
        "commonName" : {
          "type" : "string"
        }
      }
    },
    "GenericCollectionWrapper" : {
      "type" : "object",
      "properties" : {
        "results" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : { }
          }
        },
        "listCount" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "GenericResourceView" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ResourceDetails"
      }, {
        "type" : "object",
        "properties" : {
          "properties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "object",
              "properties" : { }
            }
          }
        }
      } ]
    },
    "GoalArgument" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "multiplicity" : {
          "type" : "string"
        }
      }
    },
    "GraphDataPointsForDomain" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "data" : {
          "type" : "array",
          "items" : {
            "type" : "object",
            "properties" : { }
          }
        }
      }
    },
    "ImageMapping" : {
      "type" : "object",
      "properties" : {
        "imageRefID" : {
          "type" : "string"
        },
        "location2ImageIdMap" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "ImageMappingCollection" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Collection"
      }, {
        "type" : "object",
        "properties" : {
          "results" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ImageMapping"
            }
          }
        }
      } ]
    },
    "ImageMappingUpdate" : {
      "type" : "object",
      "required" : [ "imageId", "newLocation" ],
      "properties" : {
        "imageId" : {
          "type" : "string",
          "pattern" : "[a-zA-Z0-9_-]+"
        },
        "location" : {
          "type" : "string"
        },
        "newLocation" : {
          "type" : "string",
          "pattern" : "[a-zA-Z0-9_:/\\\\.\\\\-]+"
        }
      }
    },
    "ImagesInitData" : {
      "type" : "object",
      "properties" : {
        "version" : {
          "type" : "integer",
          "format" : "int64"
        },
        "modifiedTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "imageList" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ImageMapping"
          }
        }
      }
    },
    "KPIParameterTemplate" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string"
        }
      }
    },
    "KeyInfo" : {
      "type" : "object",
      "properties" : {
        "ca" : {
          "type" : "string"
        },
        "certificate" : {
          "type" : "string"
        },
        "key" : {
          "type" : "string"
        }
      }
    },
    "LinkTypeEnum" : {
      "type" : "string",
      "enum" : [ "Chain", "Network", "External" ]
    },
    "Location" : {
      "type" : "object",
      "properties" : {
        "countryCode" : {
          "type" : "string"
        },
        "zipCode" : {
          "type" : "integer",
          "format" : "int32"
        },
        "x" : {
          "type" : "integer",
          "format" : "int32"
        },
        "y" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "LoggerLevelEnum" : {
      "type" : "string",
      "enum" : [ "ERROR", "WARN", "INFO", "DEBUG", "TRACE", "OFF", "ALL" ]
    },
    "ModifyServiceRequest" : {
      "type" : "object",
      "properties" : {
        "parameters" : {
          "type" : "object",
          "description" : "Collection of key/value pairs of model input attributes.",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "metadata" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "ModifyUserObject" : {
      "type" : "object",
      "properties" : {
        "firstName" : {
          "type" : "string"
        },
        "lastName" : {
          "type" : "string"
        },
        "email" : {
          "type" : "string"
        },
        "expDate" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "ModifyUserPasswordObject" : {
      "type" : "object",
      "properties" : {
        "currentPassword" : {
          "type" : "string"
        },
        "newPassword" : {
          "type" : "string"
        }
      }
    },
    "MonitoringKPITemplate" : {
      "type" : "object",
      "properties" : {
        "collectorQualifier" : {
          "type" : "string"
        },
        "kpiid" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "$ref" : "#/definitions/DescriptionTemplate"
        },
        "collectorID" : {
          "type" : "string"
        },
        "collectorVersion" : {
          "type" : "string"
        },
        "timeout" : {
          "type" : "string"
        },
        "intervalTime" : {
          "type" : "string"
        },
        "unit" : {
          "type" : "string"
        },
        "collectorParameters" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/KPIParameterTemplate"
          }
        }
      }
    },
    "MonitoringThresholdKPIDetailsTemplate" : {
      "type" : "object",
      "properties" : {
        "kpiId" : {
          "type" : "string"
        },
        "kpiName" : {
          "type" : "string"
        }
      }
    },
    "MonitoringThresholdTemplate" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "rule" : {
          "$ref" : "#/definitions/ThresholdRuleTemplate"
        },
        "thresholdKPIDetails" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MonitoringThresholdKPIDetailsTemplate"
          }
        },
        "eventKey" : {
          "$ref" : "#/definitions/EventKeys"
        },
        "eventSeverity" : {
          "type" : "string"
        },
        "ttl" : {
          "type" : "string"
        },
        "stagingInterval" : {
          "type" : "string"
        },
        "payloadParameters" : {
          "$ref" : "#/definitions/PayloadParameters"
        },
        "evaluationPeriods" : {
          "type" : "string"
        },
        "granularity" : {
          "type" : "string"
        },
        "eventType" : {
          "type" : "string"
        },
        "duplicationInterval" : {
          "type" : "string"
        }
      }
    },
    "NCSOTenantEntry" : {
      "type" : "object",
      "properties" : {
        "tenant" : {
          "type" : "string"
        },
        "adminLoginName" : {
          "type" : "string"
        },
        "adminPassword" : {
          "type" : "string"
        },
        "adminFirstName" : {
          "type" : "string"
        },
        "adminLastName" : {
          "type" : "string"
        },
        "adminEmail" : {
          "type" : "string"
        },
        "authenticationType" : {
          "$ref" : "#/definitions/AuthenticationTypeEnum"
        },
        "isActive" : {
          "type" : "boolean",
          "default" : false
        },
        "isDefault" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "NCSOTenantEntryCollection" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Collection"
      }, {
        "type" : "object",
        "properties" : {
          "results" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/NCSOTenantEntry"
            }
          }
        }
      } ]
    },
    "NetworkChildNode" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "location" : {
          "$ref" : "#/definitions/NetworkComponentLocation"
        }
      }
    },
    "NetworkComponentLocation" : {
      "type" : "object",
      "properties" : {
        "side" : {
          "type" : "string"
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32"
        },
        "x" : {
          "type" : "integer",
          "format" : "int32"
        },
        "y" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "NetworkConnector" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "location" : {
          "$ref" : "#/definitions/NetworkComponentLocation"
        }
      }
    },
    "NetworkLink" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "srcNode" : {
          "type" : "string"
        },
        "srcConnector" : {
          "type" : "string"
        },
        "dstNode" : {
          "type" : "string"
        },
        "dstConnector" : {
          "type" : "string"
        }
      }
    },
    "NetworkNodeInstance" : {
      "type" : "object",
      "properties" : {
        "nodeInstanceId" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "connectors" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/NetworkConnector"
          }
        },
        "children" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NetworkChildNode"
          }
        },
        "status" : {
          "type" : "string"
        },
        "relationCode" : {
          "type" : "string"
        },
        "relationDisplayName" : {
          "type" : "string"
        },
        "monitored" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "NetworkServiceAttributeMapping" : {
      "type" : "object",
      "properties" : {
        "AttributeMappingType" : {
          "$ref" : "#/definitions/AttributeMappingTypeEnum"
        },
        "attributeMappingDirection" : {
          "$ref" : "#/definitions/AttributeMappingDirectionEnum"
        },
        "sourceAttribute" : {
          "$ref" : "#/definitions/Attribute"
        },
        "targetAttribute" : {
          "$ref" : "#/definitions/Attribute"
        },
        "function" : {
          "type" : "string"
        }
      }
    },
    "NetworkServiceConnectionPointTemplate" : {
      "type" : "object",
      "properties" : {
        "node" : {
          "$ref" : "#/definitions/NetworkServiceNodeTemplate"
        },
        "connector" : {
          "$ref" : "#/definitions/NetworkServiceConnectorTemplate"
        },
        "relationCode" : {
          "type" : "string"
        }
      }
    },
    "NetworkServiceConnectorSpec" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "locale" : {
          "type" : "string"
        },
        "value" : {
          "type" : "string"
        }
      }
    },
    "NetworkServiceConnectorTemplate" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "version" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "created" : {
          "type" : "integer",
          "format" : "int64"
        },
        "updated" : {
          "type" : "integer",
          "format" : "int64"
        },
        "expired" : {
          "type" : "integer",
          "format" : "int64"
        },
        "locale" : {
          "type" : "string"
        },
        "attributes" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/Attribute"
          }
        },
        "connectorType" : {
          "$ref" : "#/definitions/NetworkServiceConnectorType"
        },
        "connectorSpec" : {
          "$ref" : "#/definitions/NetworkServiceConnectorSpec"
        },
        "name" : {
          "type" : "string"
        },
        "visualization" : {
          "$ref" : "#/definitions/NodeConnectorVisualization"
        }
      }
    },
    "NetworkServiceConnectorType" : {
      "type" : "object",
      "properties" : {
        "serviceConnectorType" : {
          "$ref" : "#/definitions/ServiceConnectorTypeEnum"
        },
        "artifacts" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Artifact"
          }
        },
        "attributes" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Attribute"
          }
        }
      }
    },
    "NetworkServiceNodeExecutionStateTemplate" : {
      "type" : "object",
      "properties" : {
        "stateCode" : {
          "type" : "string"
        },
        "stateName" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/ExecutionStateNameTemplate"
          }
        },
        "condition" : {
          "$ref" : "#/definitions/ExecutionStateConditionTemplate"
        },
        "inputAttributes" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ExecutionStateAttributeParameterTemplate"
          }
        },
        "outputAttributes" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ExecutionStateAttributeParameterTemplate"
          }
        },
        "dataFlows" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ExecutionStateDataFlowTemplate"
          }
        },
        "sequences" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SequenceTemplate"
          }
        },
        "previous" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SequenceTemplate"
          }
        },
        "subsequent" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/SequenceTemplate"
          }
        },
        "stateImplementation" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/ExecutionStateImplementation"
          }
        }
      }
    },
    "NetworkServiceNodeRelation" : {
      "type" : "object",
      "properties" : {
        "node" : {
          "$ref" : "#/definitions/NetworkServiceNodeTemplate"
        },
        "relationType" : {
          "$ref" : "#/definitions/NetworkServiceNodeRelationTypeEnum"
        },
        "quantityDomain" : {
          "$ref" : "#/definitions/QuantityDomainEnum"
        },
        "quantityValue" : {
          "type" : "string"
        },
        "mappings" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NetworkServiceAttributeMapping"
          }
        },
        "mandatory" : {
          "type" : "boolean",
          "default" : false
        },
        "constructionRule" : {
          "type" : "string"
        },
        "code" : {
          "type" : "string"
        },
        "dispalyName" : {
          "type" : "string"
        },
        "visualization" : {
          "$ref" : "#/definitions/NodeRelationVisualization"
        }
      }
    },
    "NetworkServiceNodeRelationTypeEnum" : {
      "type" : "string",
      "enum" : [ "Implementation", "Composition" ]
    },
    "NetworkServiceNodeTemplate" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "version" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "created" : {
          "type" : "integer",
          "format" : "int64"
        },
        "updated" : {
          "type" : "integer",
          "format" : "int64"
        },
        "expired" : {
          "type" : "integer",
          "format" : "int64"
        },
        "locale" : {
          "type" : "string"
        },
        "attributes" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/Attribute"
          }
        },
        "code" : {
          "type" : "string"
        },
        "networkServiceNodeType" : {
          "$ref" : "#/definitions/NetworkServiceNodeType"
        },
        "exposedService" : {
          "type" : "boolean",
          "default" : false
        },
        "designer" : {
          "type" : "string"
        },
        "connectors" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/NetworkServiceConnectorTemplate"
          }
        },
        "nodeRelations" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/NetworkServiceNodeRelation"
          }
        },
        "links" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/NetworkServiceRelationshipTemplate"
          }
        },
        "stateTransitionMaps" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/ExecutionStateTransitionMap"
          }
        },
        "monitoring" : {
          "$ref" : "#/definitions/NodeMonitoring"
        },
        "configurationElementRefID" : {
          "type" : "string"
        }
      }
    },
    "NetworkServiceNodeType" : {
      "type" : "object",
      "properties" : {
        "nodeType" : {
          "$ref" : "#/definitions/ServiceNodeTypeEnum"
        },
        "artifacts" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Artifact"
          }
        },
        "attributes" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Attribute"
          }
        }
      }
    },
    "NetworkServiceRelationshipTemplate" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "version" : {
          "type" : "string"
        },
        "displayName" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "created" : {
          "type" : "integer",
          "format" : "int64"
        },
        "updated" : {
          "type" : "integer",
          "format" : "int64"
        },
        "expired" : {
          "type" : "integer",
          "format" : "int64"
        },
        "locale" : {
          "type" : "string"
        },
        "attributes" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/Attribute"
          }
        },
        "relationshipType" : {
          "$ref" : "#/definitions/NetworkServiceRelationshipType"
        },
        "source" : {
          "$ref" : "#/definitions/NetworkServiceConnectionPointTemplate"
        },
        "target" : {
          "$ref" : "#/definitions/NetworkServiceConnectionPointTemplate"
        },
        "mappings" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NetworkServiceAttributeMapping"
          }
        },
        "code" : {
          "type" : "string"
        }
      }
    },
    "NetworkServiceRelationshipType" : {
      "type" : "object",
      "properties" : {
        "linkType" : {
          "$ref" : "#/definitions/LinkTypeEnum"
        },
        "attributes" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/Attribute"
          }
        }
      }
    },
    "NodeConnectorVisualization" : {
      "type" : "object",
      "properties" : {
        "location" : {
          "$ref" : "#/definitions/VisualConnectorLocation"
        }
      }
    },
    "NodeMonitoring" : {
      "type" : "object",
      "properties" : {
        "monitoringTimeInterval" : {
          "type" : "string"
        },
        "monitoringKPIs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MonitoringKPITemplate"
          }
        },
        "monitoringThresholds" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/MonitoringThresholdTemplate"
          }
        }
      }
    },
    "NodeRelationVisualization" : {
      "type" : "object",
      "properties" : {
        "location" : {
          "$ref" : "#/definitions/VisualRelationLocation"
        }
      }
    },
    "OpenStackVM" : {
      "allOf" : [ {
        "$ref" : "#/definitions/ResourceDetails"
      }, {
        "type" : "object",
        "properties" : {
          "uuid" : {
            "type" : "string"
          },
          "ipAddresses" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "type" : "string"
              }
            }
          }
        }
      } ]
    },
    "OrchestrationAndNetworkGraph" : {
      "type" : "object",
      "properties" : {
        "serviceId" : {
          "type" : "string"
        },
        "treeKey" : {
          "$ref" : "#/definitions/TreeKey"
        },
        "rootNodeId" : {
          "type" : "string"
        },
        "nodeInstances" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/NetworkNodeInstance"
          }
        },
        "links" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/NetworkLink"
          }
        },
        "nodeInfo" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "array",
              "items" : {
                "type" : "object",
                "properties" : { }
              }
            }
          }
        }
      }
    },
    "OrchestrationTreeDiff" : {
      "type" : "object",
      "properties" : {
        "diffSummary" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "object",
            "additionalProperties" : {
              "type" : "integer",
              "format" : "int32"
            }
          }
        },
        "newOrchestrationTree" : {
          "$ref" : "#/definitions/OrchestrationAndNetworkGraph"
        },
        "oldOrchestrationTree" : {
          "$ref" : "#/definitions/OrchestrationAndNetworkGraph"
        },
        "nodesToBeRemoved" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/NetworkNodeInstance"
          }
        },
        "nodesToBeAdded" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "integer",
            "format" : "int32"
          }
        }
      }
    },
    "OrchestrationTreeVersionInfoModel" : {
      "type" : "object",
      "properties" : {
        "version" : {
          "type" : "string"
        },
        "serviceId" : {
          "type" : "string"
        },
        "requestId" : {
          "type" : "string"
        },
        "workflowStartedTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "activeStartTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "terminatedStartTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "previousVersion" : {
          "type" : "string"
        },
        "previousWorkflowStartedVersion" : {
          "type" : "string"
        },
        "createdTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "modifiedTime" : {
          "type" : "integer",
          "format" : "int64"
        }
      }
    },
    "Password" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "username" : {
          "type" : "string"
        },
        "password" : {
          "type" : "string"
        }
      }
    },
    "PayloadParameters" : {
      "type" : "object",
      "properties" : {
        "values" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/Value"
          }
        }
      }
    },
    "Permission" : {
      "type" : "object",
      "required" : [ "name", "operations" ],
      "properties" : {
        "object" : {
          "type" : "string"
        },
        "operations" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "name" : {
          "type" : "string"
        }
      },
      "description" : "name - The unique ID of the permission.\noperations - The list of operations ([\"create\", \"read\"...]) that are allowed on the object.\n"
    },
    "PermissionUpdate" : {
      "type" : "object",
      "properties" : {
        "object" : {
          "type" : "string"
        },
        "operations" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "PluginGoal" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "response" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        },
        "args" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GoalArgument"
          }
        }
      }
    },
    "PluginImplementation" : {
      "type" : "object",
      "properties" : {
        "qualifier" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "goals" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PluginGoal"
          }
        }
      }
    },
    "PluginInfo" : {
      "type" : "object",
      "properties" : {
        "key" : {
          "$ref" : "#/definitions/PluginKey"
        },
        "name" : {
          "type" : "string"
        },
        "pluginFileName" : {
          "type" : "string"
        },
        "libFolder" : {
          "type" : "string"
        },
        "sha256" : {
          "type" : "string"
        },
        "enabled" : {
          "type" : "boolean",
          "default" : false
        },
        "trusted" : {
          "type" : "boolean",
          "default" : false
        },
        "port" : {
          "type" : "string"
        },
        "manifestVersion" : {
          "type" : "string"
        },
        "sdkVersion" : {
          "type" : "string"
        },
        "pluginConfig" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "interfaces" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PluginInterface"
          }
        }
      }
    },
    "PluginInterface" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "implementations" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/PluginImplementation"
          }
        }
      }
    },
    "PluginKey" : {
      "type" : "object",
      "properties" : {
        "version" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "id" : {
          "type" : "string"
        }
      }
    },
    "PluginKeyCollection" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Collection"
      }, {
        "type" : "object",
        "properties" : {
          "results" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/PluginKey"
            }
          }
        }
      } ]
    },
    "PluginStatusEnum" : {
      "type" : "string",
      "enum" : [ "ACTIVE", "DISABLED" ]
    },
    "PluginStatusUpdate" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "$ref" : "#/definitions/PluginStatusEnum"
        }
      }
    },
    "QuantityDomainEnum" : {
      "type" : "string",
      "enum" : [ "ParentDriven", "PolicyDriven", "Static", "LinkDriven", "ExecutionDriven", "Compute" ]
    },
    "RequestDomainEnum" : {
      "type" : "string",
      "enum" : [ "Planner", "WorkFlowManager", "Manager", "CloudManager", "E2E", "ER" ]
    },
    "RequestState" : {
      "type" : "object",
      "properties" : {
        "code" : {
          "$ref" : "#/definitions/RequestStateCodeEnum"
        },
        "domain" : {
          "$ref" : "#/definitions/RequestDomainEnum"
        },
        "cancelledByRequestId" : {
          "type" : "string"
        }
      }
    },
    "RequestStateCodeEnum" : {
      "type" : "string",
      "enum" : [ "NEW", "SERVICE_TREE_CREATED", "SERVICE_TREE_APPROVED", "SERVICE_TREE_CANCELED", "WORKFLOW_CREATED", "CANCELLATION_IN_PROCESS", "WORKFLOW_HOLDEN", "CANCELED", "WORKFLOW_STARTED", "WORKFLOW_CANCELED", "COMPLETED", "WARNING", "ERROR" ]
    },
    "RequestStateModel" : {
      "type" : "object",
      "properties" : {
        "serviceId" : {
          "type" : "string"
        },
        "requestID" : {
          "type" : "string"
        },
        "requestState" : {
          "$ref" : "#/definitions/RequestState"
        },
        "taskIds" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "serviceRequestStateCode" : {
          "type" : "string"
        },
        "serviceRequestStateDescription" : {
          "type" : "string"
        }
      }
    },
    "ResourceDetails" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "type" : {
          "type" : "string"
        },
        "domain" : {
          "type" : "string"
        },
        "location" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "ResourceDetailsCollection" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Collection"
      }, {
        "type" : "object",
        "properties" : {
          "results" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ResourceDetails"
            }
          }
        }
      } ]
    },
    "RolePermissions" : {
      "type" : "object",
      "properties" : {
        "permissions" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "RolesConflictRule" : {
      "type" : "object",
      "required" : [ "conflicts", "role" ],
      "properties" : {
        "role" : {
          "type" : "string",
          "description" : "Role name"
        },
        "conflicts" : {
          "type" : "array",
          "description" : "Conflicting role names",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "Rule" : {
      "type" : "object",
      "properties" : {
        "ruleHeader" : {
          "$ref" : "#/definitions/RuleHeader"
        },
        "ruleBody" : {
          "$ref" : "#/definitions/RuleBody"
        }
      }
    },
    "RuleBody" : {
      "type" : "object",
      "properties" : {
        "attributes" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "when" : {
          "type" : "string"
        },
        "then" : {
          "type" : "string"
        },
        "imports" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "additionalElements" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        }
      }
    },
    "RuleHeader" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "scope" : {
          "type" : "string"
        },
        "domain" : {
          "type" : "string"
        },
        "nodeCode" : {
          "type" : "string"
        },
        "nodeVersion" : {
          "type" : "string"
        },
        "serviceInstanceId" : {
          "type" : "string"
        },
        "autoScope" : {
          "type" : "boolean",
          "default" : false
        },
        "overridable" : {
          "type" : "boolean",
          "default" : false
        },
        "overriddenRuleId" : {
          "type" : "string"
        },
        "weight" : {
          "type" : "number",
          "format" : "double"
        },
        "priority" : {
          "type" : "integer",
          "format" : "int32"
        },
        "mandatory" : {
          "type" : "boolean",
          "default" : false
        },
        "language" : {
          "type" : "string"
        }
      }
    },
    "RulesFilterObject" : {
      "type" : "object",
      "properties" : {
        "domain" : {
          "type" : "string"
        },
        "nodeCode" : {
          "type" : "string"
        },
        "nodeVersion" : {
          "type" : "string"
        },
        "serviceInstanceId" : {
          "type" : "string"
        }
      }
    },
    "ScopeListsDefinition" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string"
        },
        "scopeDefList" : {
          "type" : "array",
          "items" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      }
    },
    "SequenceTemplate" : {
      "type" : "object",
      "properties" : {
        "value" : {
          "type" : "string"
        }
      }
    },
    "ServiceActionEnum" : {
      "type" : "string",
      "enum" : [ "PROVIDE", "MODIFY", "TERMINATE", "CANCELLATION", "DIRECT_WORKFLOW", "UPGRADE" ]
    },
    "ServiceActionRequest" : {
      "type" : "object",
      "properties" : {
        "action" : {
          "$ref" : "#/definitions/ServiceActionEnum"
        },
        "serviceRequest" : {
          "$ref" : "#/definitions/ServiceRequest"
        }
      }
    },
    "ServiceConnectorTypeEnum" : {
      "type" : "string",
      "enum" : [ "Chain", "External", "Logical", "vNIC", "Network" ]
    },
    "ServiceDetails" : {
      "type" : "object",
      "properties" : {
        "requestId" : {
          "type" : "string"
        },
        "serviceId" : {
          "type" : "string"
        },
        "status" : {
          "type" : "string"
        },
        "domain" : {
          "type" : "string"
        },
        "creationDate" : {
          "type" : "integer",
          "format" : "int64"
        },
        "modificationDate" : {
          "type" : "integer",
          "format" : "int64"
        },
        "customerName" : {
          "type" : "string"
        },
        "catalogName" : {
          "type" : "string"
        },
        "action" : {
          "type" : "string"
        }
      }
    },
    "ServiceDetailsCollection" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Collection"
      }, {
        "type" : "object",
        "properties" : {
          "results" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ServiceDetails"
            }
          }
        }
      } ]
    },
    "ServiceGraphData" : {
      "type" : "object",
      "properties" : {
        "series" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/GraphDataPointsForDomain"
          }
        }
      }
    },
    "ServiceInfoModel" : {
      "type" : "object",
      "properties" : {
        "processingTime" : {
          "type" : "string"
        },
        "serviceId" : {
          "type" : "string"
        },
        "activeVersion" : {
          "type" : "string"
        },
        "terminatedVersion" : {
          "type" : "string"
        },
        "lastPlanningCompletedVersion" : {
          "type" : "string"
        },
        "lastWorkflowStartedVersion" : {
          "type" : "string"
        },
        "serviceVersions" : {
          "type" : "array",
          "items" : {
            "type" : "string"
          }
        },
        "versionInfoList" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/OrchestrationTreeVersionInfoModel"
          }
        }
      }
    },
    "ServiceMetrics" : {
      "type" : "object",
      "properties" : {
        "vnf" : {
          "type" : "integer",
          "format" : "int32"
        },
        "vm" : {
          "type" : "integer",
          "format" : "int32"
        },
        "dataCenter" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "ServiceMonitoringData" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "$ref" : "#/definitions/ServiceMonitoringDataTypeEnum"
        },
        "graphData" : {
          "$ref" : "#/definitions/ServiceGraphData"
        },
        "kpiList" : {
          "$ref" : "#/definitions/ServiceMonitoringKpiCollection"
        },
        "aggregatedData" : {
          "type" : "object",
          "additionalProperties" : {
            "$ref" : "#/definitions/ServiceMonitoringKpiCollection"
          }
        }
      }
    },
    "ServiceMonitoringDataTypeEnum" : {
      "type" : "string",
      "enum" : [ "AGGREGATED", "SAMPLING" ]
    },
    "ServiceMonitoringKpi" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "string"
        },
        "value" : {
          "type" : "number",
          "format" : "double"
        }
      }
    },
    "ServiceMonitoringKpiCollection" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Collection"
      }, {
        "type" : "object",
        "properties" : {
          "results" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/ServiceMonitoringKpi"
            }
          }
        }
      } ]
    },
    "ServiceNodeTypeEnum" : {
      "type" : "string",
      "enum" : [ "VNF", "NetworkService", "AUXService", "VNFC" ]
    },
    "ServiceOptions" : {
      "type" : "object",
      "properties" : {
        "treeConfirmation" : {
          "$ref" : "#/definitions/Confirmation"
        },
        "planConfirmation" : {
          "$ref" : "#/definitions/Confirmation"
        },
        "logDecisions" : {
          "type" : "boolean",
          "default" : false
        }
      }
    },
    "ServiceRequest" : {
      "type" : "object",
      "properties" : {
        "modelId" : {
          "type" : "string",
          "example" : "Internet_Connectivity_Service",
          "description" : "The Model ID (the human-readable identifier for a service model)"
        },
        "modelVersion" : {
          "type" : "string",
          "example" : "1.0.2",
          "description" : "Model version based on semantic versioning scheme\n<major>.<minor>.<patch>\n"
        },
        "modelUID" : {
          "type" : "string",
          "example" : "c9266d9c-f483-4338-88f4-4302856e97ca",
          "description" : "Unique identifier of model version definition (generated by catalog)"
        },
        "parameters" : {
          "type" : "object",
          "description" : "Collection of key/value pairs of model input attributes.",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "metadata" : {
          "type" : "object",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "options" : {
          "$ref" : "#/definitions/ServiceOptions"
        }
      }
    },
    "ServiceRequestAcknowledgment" : {
      "type" : "object",
      "properties" : {
        "requestId" : {
          "type" : "string"
        },
        "serviceId" : {
          "type" : "string"
        }
      }
    },
    "ServiceSpecification" : {
      "type" : "object",
      "properties" : {
        "identifier" : {
          "type" : "string"
        },
        "version" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string"
        },
        "description" : {
          "type" : "string"
        }
      }
    },
    "ServiceSpecsCollection" : {
      "type" : "object",
      "properties" : {
        "specs" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ServiceSpecification"
          }
        }
      }
    },
    "ServiceVersionsRequestModel" : {
      "type" : "object",
      "properties" : {
        "processingTime" : {
          "type" : "string"
        },
        "requestStateModel" : {
          "$ref" : "#/definitions/RequestStateModel"
        },
        "serviceInfoModel" : {
          "$ref" : "#/definitions/ServiceInfoModel"
        }
      }
    },
    "StringCollection" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Collection"
      }, {
        "type" : "object",
        "properties" : {
          "results" : {
            "type" : "array",
            "items" : {
              "type" : "string"
            }
          }
        }
      } ]
    },
    "StringWrapper" : {
      "type" : "object",
      "properties" : {
        "value" : {
          "type" : "string"
        }
      }
    },
    "SystemEREvent" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SystemEvent"
      }, {
        "type" : "object",
        "properties" : {
          "eventType" : {
            "$ref" : "#/definitions/EREventTypeEnum"
          },
          "eventID" : {
            "type" : "string"
          },
          "eventKeyValue" : {
            "type" : "string"
          },
          "parentEventId" : {
            "type" : "string"
          },
          "timestamp" : {
            "type" : "integer",
            "format" : "int64"
          },
          "publisher" : {
            "$ref" : "#/definitions/EventPublisherEnum"
          },
          "state" : {
            "$ref" : "#/definitions/EventStateEnum"
          },
          "stateReason" : {
            "$ref" : "#/definitions/EventStateReasonEnum"
          },
          "enrichMsg" : {
            "type" : "string"
          },
          "isBroadcast" : {
            "type" : "boolean"
          },
          "eventSeverity" : {
            "type" : "string"
          },
          "serviceId" : {
            "type" : "string"
          },
          "catalogId" : {
            "type" : "string"
          },
          "catalogCode" : {
            "type" : "string"
          },
          "catalogVersion" : {
            "type" : "string"
          }
        }
      } ]
    },
    "SystemEvent" : {
      "type" : "object",
      "properties" : {
        "eventDateTime" : {
          "type" : "integer",
          "format" : "int64"
        },
        "entryType" : {
          "$ref" : "#/definitions/SystemEventEntryTypeEnum"
        }
      }
    },
    "SystemEventCollection" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Collection"
      }, {
        "type" : "object",
        "properties" : {
          "results" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/SystemEvent"
            }
          }
        }
      } ]
    },
    "SystemEventEntryTypeEnum" : {
      "type" : "string",
      "enum" : [ "ER_EVENT", "LOG_ENTRY" ]
    },
    "SystemInitParams" : {
      "type" : "object",
      "properties" : {
        "tenant" : {
          "type" : "string"
        },
        "adminLoginName" : {
          "type" : "string"
        },
        "adminPassword" : {
          "type" : "string"
        },
        "adminFirstName" : {
          "type" : "string"
        },
        "adminEmail" : {
          "type" : "string"
        },
        "adminLastName" : {
          "type" : "string"
        }
      }
    },
    "SystemLogEvent" : {
      "allOf" : [ {
        "$ref" : "#/definitions/SystemEvent"
      }, {
        "type" : "object",
        "required" : [ "tenant" ],
        "properties" : {
          "loggerLevel" : {
            "$ref" : "#/definitions/LoggerLevelEnum"
          },
          "componentName" : {
            "type" : "string",
            "description" : "Component name"
          },
          "message" : {
            "type" : "string",
            "description" : "Log message"
          },
          "machineId" : {
            "type" : "string",
            "description" : "Machine ID"
          },
          "taskId" : {
            "type" : "string",
            "description" : "Task ID"
          },
          "type" : {
            "type" : "string",
            "description" : "Type"
          },
          "eventSystemDateTime" : {
            "type" : "string",
            "description" : "Event system datetime"
          },
          "location" : {
            "type" : "string",
            "description" : "Event location"
          },
          "loggerLevelInt" : {
            "type" : "integer",
            "description" : "Numeric logger level"
          },
          "notificationType" : {
            "type" : "string",
            "description" : "Notification type"
          },
          "tenant" : {
            "type" : "string",
            "description" : "Tenant name"
          },
          "serviceId" : {
            "type" : "string",
            "description" : "Service ID"
          },
          "requestId" : {
            "type" : "string",
            "description" : "Request ID"
          },
          "erSessionId" : {
            "type" : "string",
            "description" : "ER session ID"
          }
        }
      } ]
    },
    "SystemLogEventCollection" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Collection"
      }, {
        "type" : "object",
        "properties" : {
          "results" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/SystemLogEvent"
            }
          }
        }
      } ]
    },
    "SystemTask" : {
      "type" : "object",
      "properties" : {
        "taskId" : {
          "type" : "string",
          "description" : "Task ID"
        },
        "serviceId" : {
          "type" : "string",
          "description" : "Service ID"
        },
        "requestId" : {
          "type" : "string",
          "description" : "Request ID"
        },
        "serviceName" : {
          "type" : "string",
          "description" : "Service name"
        },
        "customer" : {
          "type" : "string",
          "description" : "Customer"
        },
        "dueDate" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Task due date"
        },
        "type" : {
          "type" : "string",
          "description" : "Task type"
        },
        "defaultAction" : {
          "type" : "string",
          "description" : "Task default action"
        },
        "message" : {
          "type" : "string",
          "description" : "Task message"
        },
        "state" : {
          "type" : "string",
          "description" : "Task state"
        },
        "actionTaken" : {
          "type" : "string",
          "description" : "Last task action"
        }
      }
    },
    "SystemTaskCollection" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Collection"
      }, {
        "type" : "object",
        "properties" : {
          "results" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/SystemTask"
            }
          }
        }
      } ]
    },
    "TaskActionEnum" : {
      "type" : "string",
      "enum" : [ "Approve", "Cancel", "RePlan", "Retry" ]
    },
    "TaskResolution" : {
      "type" : "object",
      "properties" : {
        "comment" : {
          "type" : "string",
          "description" : "User comment"
        },
        "taskAction" : {
          "$ref" : "#/definitions/TaskActionEnum"
        }
      },
      "description" : ""
    },
    "TenantAwareCredentials" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Credentials"
      }, {
        "type" : "object",
        "properties" : {
          "tenantName" : {
            "type" : "string",
            "pattern" : "[a-zA-Z0-9_:/.@-]+"
          }
        }
      } ]
    },
    "TenantAwareCredentialsCollection" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Collection"
      }, {
        "type" : "object",
        "properties" : {
          "results" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/TenantAwareCredentials"
            }
          }
        }
      } ]
    },
    "TenantAwareCredentialsUpdate" : {
      "type" : "object",
      "properties" : {
        "oldPassword" : {
          "type" : "string",
          "description" : "Old password"
        },
        "credentials" : {
          "$ref" : "#/definitions/TenantAwareCredentials"
        }
      }
    },
    "ThresholdRuleTemplate" : {
      "type" : "object",
      "properties" : {
        "value" : {
          "type" : "string"
        }
      }
    },
    "TreeKey" : {
      "type" : "object",
      "properties" : {
        "version" : {
          "type" : "integer",
          "format" : "int64"
        },
        "attempt" : {
          "type" : "integer",
          "format" : "int64"
        },
        "id" : {
          "type" : "string"
        }
      }
    },
    "UpdateDatastoreRecordRequest" : {
      "type" : "object",
      "properties" : {
        "record" : {
          "type" : "object",
          "description" : "JSON object, specific record to be stored",
          "properties" : { }
        }
      }
    },
    "User" : {
      "type" : "object",
      "required" : [ "username" ],
      "properties" : {
        "username" : {
          "type" : "string",
          "description" : "Username"
        },
        "firstName" : {
          "type" : "string",
          "description" : "First name"
        },
        "lastName" : {
          "type" : "string",
          "description" : "Last name"
        },
        "email" : {
          "type" : "string",
          "description" : "Email address"
        },
        "expDate" : {
          "type" : "integer",
          "format" : "int64",
          "description" : "Expiration date in milliseconds"
        },
        "status" : {
          "$ref" : "#/definitions/UserStatusEnum"
        },
        "password" : {
          "type" : "string",
          "description" : "User password"
        }
      }
    },
    "UserCollection" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Collection"
      }, {
        "type" : "object",
        "properties" : {
          "results" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/User"
            }
          }
        }
      } ]
    },
    "UserLoginCredentials" : {
      "type" : "object",
      "properties" : {
        "username" : {
          "type" : "string"
        },
        "password" : {
          "type" : "string"
        },
        "tenant" : {
          "type" : "string"
        }
      },
      "description" : "Credentials include the user name, password and tenant name that the user is associated with.\n"
    },
    "UserRole" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "description" : {
          "type" : "string"
        },
        "parent" : {
          "type" : "string"
        },
        "name" : {
          "type" : "string",
          "description" : "Role Name"
        }
      }
    },
    "UserRoleAssignement" : {
      "type" : "object",
      "properties" : {
        "userName" : {
          "type" : "string"
        }
      }
    },
    "UserRoleCollection" : {
      "allOf" : [ {
        "$ref" : "#/definitions/Collection"
      }, {
        "type" : "object",
        "properties" : {
          "results" : {
            "type" : "array",
            "items" : {
              "$ref" : "#/definitions/UserRole"
            }
          }
        }
      } ]
    },
    "UserRoleUpdate" : {
      "type" : "object",
      "properties" : {
        "description" : {
          "type" : "string"
        },
        "parent" : {
          "type" : "string"
        }
      }
    },
    "UserStatusEnum" : {
      "type" : "string",
      "enum" : [ "ACTIVE", "DISABLED" ]
    },
    "UserStatusUpdate" : {
      "type" : "object",
      "properties" : {
        "status" : {
          "$ref" : "#/definitions/UserStatusEnum"
        }
      }
    },
    "Value" : {
      "type" : "object",
      "properties" : {
        "value" : {
          "type" : "string"
        },
        "locale" : {
          "type" : "string"
        },
        "val" : {
          "type" : "string"
        }
      }
    },
    "VisualConnectorLocation" : {
      "type" : "object",
      "properties" : {
        "side" : {
          "$ref" : "#/definitions/VisualLocationSideEnum"
        },
        "offset" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "VisualLocationSideEnum" : {
      "type" : "string",
      "enum" : [ "Left", "Right", "Top", "Bottom" ]
    },
    "VisualRelationLocation" : {
      "type" : "object",
      "properties" : {
        "gridOffsetX" : {
          "type" : "integer",
          "format" : "int32"
        },
        "gridOffsetY" : {
          "type" : "integer",
          "format" : "int32"
        }
      }
    },
    "WorkFlowImplementation" : {
      "type" : "object",
      "properties" : {
        "operationID" : {
          "type" : "string"
        },
        "operationImplementation" : {
          "type" : "string"
        },
        "implementationParams" : {
          "type" : "array",
          "items" : {
            "$ref" : "#/definitions/ExecutionStateAttributeParameterTemplate"
          }
        }
      }
    }
  },
  "securityRequirement" : [ {
    "UserSecurity" : [ ]
  } ]
}